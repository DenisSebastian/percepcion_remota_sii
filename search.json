[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso: Geoanálisis de Imágenes Satelitales para SII",
    "section": "",
    "text": "1 Introducción\nEl curso se enfoca en entregar a los asistentes las nociones básicas de Percepción Remota aplicada en diferentes ámbitos, tales como medio ambiente, urbanismo, contaminación, recursos y capital natural. Para ello se utilizará la plataforma Google Earth Engine (GEE), introduciendo el manejo básico para almacenar, visualizar y analizar imágenes satelitales."
  },
  {
    "objectID": "index.html#programa",
    "href": "index.html#programa",
    "title": "Curso: Geoanálisis de Imágenes Satelitales para SII",
    "section": "1.1 Programa",
    "text": "1.1 Programa"
  },
  {
    "objectID": "index.html#profesor-denis-berroeta-gonzález",
    "href": "index.html#profesor-denis-berroeta-gonzález",
    "title": "Curso: Geoanálisis de Imágenes Satelitales para SII",
    "section": "Profesor: Denis Berroeta González",
    "text": "Profesor: Denis Berroeta González\nCoordinador de Investigación en el Centro de Inteligencia Territorial (CIT).\nemail: denis.berroeta@uai.cl\nIngeniero en Prevención de Riesgos, Magíster en Inteligencia Artificial, Doctorado y Master in Data Science (cursando). Experiencia en en Percepción Remota Profesor en Diplomado de Gestión y evidencia Territorial, Servicio Aerofotogramétrico de la Fuerza Aérea de Chile y SII. Tema de Tesis Detección de Cambios en Imágenes Radar con técnicas de deep learning.\nProfesor de cursos y postgrados de Facultad de Gobierno UAI, CIAE de Universidad de Chile, Contraloría General de la República."
  },
  {
    "objectID": "index.html#ayudante-felipe-matas-vicent",
    "href": "index.html#ayudante-felipe-matas-vicent",
    "title": "Curso: Geoanálisis de Imágenes Satelitales para SII",
    "section": "Ayudante: Felipe Matas Vicent",
    "text": "Ayudante: Felipe Matas Vicent\nAnalista de investigación y desarrollo en el Centro de Inteligencia Territorial (CIT).\nemail: felipe.matas@edu.uai.cl\nIngeniero Industrial con mención en energía. Levantamiento, implementación y desarrollo de nuevas tecnologías y metodologías, soporte a proyectos.\nExperiencia en programación, desarrollo de soluciones con TI, toma de muestras y análisis de de datos, probabilidades y Kernel Density. Ayudante en Curso de Ciencia de datos espaciales y Diplomado de Diseño territorial basado en evidencia."
  },
  {
    "objectID": "objetivos.html#objetivo-general",
    "href": "objetivos.html#objetivo-general",
    "title": "2  Objetivos",
    "section": "2.1 Objetivo General:",
    "text": "2.1 Objetivo General:\nEl objetivo general del curso es entregar a los participantes las herramientas de análisis cuantitativo territorial, introduciendo el manejo básico de la plataforma de almacenamiento, visualización y análisis de imágenes satelitales Google Earth Engine."
  },
  {
    "objectID": "objetivos.html#objetivos-específicos",
    "href": "objetivos.html#objetivos-específicos",
    "title": "2  Objetivos",
    "section": "2.2 Objetivos Específicos",
    "text": "2.2 Objetivos Específicos\n\nEntregar a los asistentes las nociones básicas de Percepción Remota aplicada en diferentes ámbitos, tales como medio ambiente, urbanismo, contaminación, recursos y capital natural.\nCapacitar a los asistentes en el manejo básico de la plataforma de almacenamiento, visualización y análisis de imágenes satelitales Google Earth Engine, para manipular, sistematizar y procesar insumos provenientes de diferentes sensores satelitales.\nEntregar a los asistentes las capacidades metodológicas base para el diseño y la construcción de un conjunto de índices espectrales e indicadores ambientales, utilizando la imaginería satelital disponible a la comunidad."
  },
  {
    "objectID": "fundamentos_PR.html#conceptos-teóricos",
    "href": "fundamentos_PR.html#conceptos-teóricos",
    "title": "3  S1: Percepción Remota",
    "section": "3.1 Conceptos Teóricos",
    "text": "3.1 Conceptos Teóricos\n\n3.1.1 Definición de Percepción Remota\nLa Percepción Remota es una disciplina científica que, en la actualidad, se presenta como una herramienta clave para el estudio de la Tierra y su entorno. Esta disciplina proporciona un amplio conjunto de conocimientos y tecnologías utilizados para la observación, el análisis y la interpretación de fenómenos en la superficie terrestre.\nEn términos generales, la Percepción Remota nos permite llevar a cabo observaciones y mediciones mediante dispositivos remotos, como satélites, aviones y drones. Los sensores instalados en estas plataformas miden una gran variedad de datos, entre ellos radiaciones electromagnéticas, espectro electromagnético, perturbaciones atmosféricas, firmas espectrales y captura de imágenes.\nLa Percepción Remota se ha convertido en una disciplina fundamental para el estudio de la Tierra y su entorno, y su aplicación en la investigación y la gestión de recursos naturales ha demostrado ser de gran utilidad en la toma de decisiones en distintos ámbitos. En este sentido, el desarrollo de tecnologías cada vez más sofisticadas y eficientes en la captura y procesamiento de datos, así como la creciente cantidad de información disponible, hacen que la Percepción Remota siga siendo un campo en constante evolución y con un gran potencial para el futuro.\n\n\n\n\n\n\n\n3.1.2 Aplicaciones de la PR\nLa importancia de la Percepción Remota radica en su capacidad para capturar información valiosa sobre la superficie terrestre, lo que ha permitido importantes avances en áreas como la agricultura, la geología, la climatología y la gestión de recursos naturales. Por ejemplo, gracias a la Percepción Remota, hoy en día es posible monitorear la salud de los cultivos y prevenir enfermedades, identificar zonas de riesgo para la exploración de recursos minerales y petroleros, predecir desastres naturales y monitorear los efectos del cambio climático. A continuación se describen algunos ejemplos de usos de la perceción remota:\nMonitoreo Ambiental:\n\nBosque Nativo: Superficie anual, Vigor vegetacional Desforestación\nContaminación de Recursos Naturales: Borde Costero, red clorhídrica, cuerpos de agua, suelos, aire.\nGlaciares: Superficie de cuerpos glaciares\nHumedales Alto Andino: Superficie anual vegetada e inundada en el humedal\n\nMonitoreo Urbano:\n\nCrecimiento urbano: Superficie urbana cambios en la ciudades y planificación\nCrecimiento rural: Superficie urbana cambios en la ruralidad\nCrecimiento asentamientos irregulares: Crecimiento de las asentamientos informales\n\nDesastres Naturales:\n\nIncendios Forestales: Estimación de superficie afectada\nTerremotos y Tsunamis: Estimación de daños gestión de riesgos\nDeslizamientos de Tierra: Estimación de superficie afectada\nAluviones: Estimación de superficie afectada\nEmergencias Volcánicas: Estimación de superficie afectada\n\nIndustrias:\n\nForestal: Estimación de superficie afectada\nMinería: Estimación de superficie afectada\nAgrícola: Estimación de superficie afectada\n\n\n\n\n3.1.3 ¿Qué es la Percepción Remota?\nLa medición de una cantidad asociada con un objeto por un aparato no en contacto directo con el objeto.\nAparatos: Antena, vehículo aéreo, satélites.\n\n\n\n\n\n¿Qué se mide la percepción remota satelital?\nLa percepción remota satelital utiliza instrumentos y sensores para medir la radiación electromagnética proveniente del sistema tierra-atmósfera. La intensidad de la radiación reflejada y emitida al espacio está influenciada por las condiciones en la superficie y la atmósfera.\n\n\n\n\n\nLa radiación electromagnética producida por el Sol es la energía que emite en forma de ondas electromagnéticas. Esta radiación se divide en diferentes tipos según su longitud de onda, como los rayos X, los rayos gamma, la luz visible, las ondas de radio, entre otros.\nLa atmósfera terrestre juega un papel importante en la radiación electromagnética que llega a la superficie terrestre. Parte de la radiación es absorbida por la atmósfera, mientras que otra parte es reflejada y dispersada en diferentes direcciones. El efecto de la atmósfera puede modificar la intensidad de la radiación que llega a la superficie terrestre y puede afectar las mediciones realizadas por los dispositivos de percepción remota. Por esta razón, es importante tener en cuenta las condiciones atmosféricas al interpretar las mediciones de sensores remotos.\n\n\n3.1.4 Radiación Electromagnética\nEl principio básico se basa en que todos los cuerpos emiten radiación electromagnética, el tipo y la cantidad depende principalmente de la temperatura del cuerpo (Figure 3.1).\nEl principal emisor de radiación es el Sol, cuyo reflejo en la superficie y atmósfera terrestre nos permite ver y analizar los objetos a nuestro alrededor.\n\n\n\nFigure 3.1: La vegetación verde, absorbe las ondas azules (B) y rojas (R) y refleja las verdes (G) e infrarrojas (IR)\n\n\n\n\n3.1.5 Espectro Electromanético\nEl espectro electromagnético es el conjunto de todas las ondas electromagnéticas que existen, desde las ondas de radio hasta los rayos gamma (Figure 3.2). Cada tipo de onda electromagnética tiene una longitud de onda y una frecuencia específicas que determinan su ubicación en el espectro. Las ondas de radio tienen la longitud de onda más larga y la frecuencia más baja, mientras que los rayos gamma tienen la longitud de onda más corta y la frecuencia más alta.\nLa percepción remota satelital se basa en la medición de la radiación electromagnética que emiten los objetos de la superficie terrestre, y los sensores instalados en los satélites miden la radiación en diferentes longitudes de onda para obtener información sobre la composición y las características de los objetos que se están observando.\n\n\n\nFigure 3.2: Espectro Electromanético\n\n\n\n\n3.1.6 Firmas Espectrales\nUna vez que la energía electromagnética llega a la superficie terrestre, interactúa con cada tipo de material ya sea por reflexión, absorción o transmisión, de acuerdo a un patrón de respuesta espectral particular. Este comportamiento distintivo de cada tipo de material es aprovechado en procesos de clasificación de imágenes, siendo común referirse a él como “firma espectral”.\n\n\n\nEjemplo: Vegetación Sana, tiene peaks en Banda Verde (550 nm) y comienzo del Banda Infrarroja (750 nm)"
  },
  {
    "objectID": "fundamentos_PR.html#conceptos-prácticos-sobre-raster",
    "href": "fundamentos_PR.html#conceptos-prácticos-sobre-raster",
    "title": "3  S1: Percepción Remota",
    "section": "3.2 Conceptos Prácticos sobre Raster",
    "text": "3.2 Conceptos Prácticos sobre Raster\nLa estructura matemática mínima de una imagen es una matriz, para operar operar sobre ella la usaremos a un nivel más complejo llamado raster. En el contexto de la percepción remota satelital, las imágenes se pueden representar como una matriz de píxeles, donde cada píxel se identifica por su ubicación en la fila y columna correspondiente de la matriz. Al analizar las propiedades de los píxeles, como su valor de reflectancia o su firma espectral, se puede obtener información sobre las características de los objetos que se están observando en la imagen.\n\n3.2.1 Definición Raster\nLos objetos raster representan entidades geográficas dividiendo el espacio físico en celdas discretas cuadradas o rectangulares dispuestas en una cuadrícula. De igual forma,\n\n\n\n\n\n3.2.2 Matriz de un Raster\nUn ráster consta de una matriz de celdas (o píxeles) organizadas en filas y columnas (o una cuadrícula) en la que cada celda contiene un valor que representa información.\n\n\n\n\n\n3.2.3 Resolución Espacial\nCuanto más pequeño sea el tamaño de celda, más suave o más detallado será el ráster. Sin embargo, cuanto mayor sea el número de celdas, más tiempo tardará en procesar, aumentándose a su vez la demanda de espacio de almacenamiento.\n\n\n\n\n\n3.2.4 Referencia Espacial\nLa matriz queda representada por un Sistema de coordenadas cartesianas, en las que las filas de la matriz son paralelas al eje x y las columnas al eje y del plano cartesiano\n\n\n\n\n\n3.2.5 Clases Matriz y Array en R\nUna matriz es una estructura matemática muy común en la cual se representan datos en forma de arreglos rectangulares de números o símbolos. Las matrices se componen de filas y columnas, y cada entrada en la matriz se identifica por su posición en la fila y columna correspondiente.\nUn raster multibanda es un array de tres dimensiones con información de referencia espacial. Por lo anterior, debemos cubrir estos tipos de estructuras de datos en R.\n\n\n3.2.6 Matrix\nSe crea con la función matrix\nMatriz Vacía\n\nlibrary(raster)\n\nmi_matriz <- matrix(ncol= 3,nrow = 3) # crear una matriz vacía\nmi_matriz\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n[3,]   NA   NA   NA\n\nplot(raster(mi_matriz), col = heat.colors(9, rev = T),\n     main = \"Matriz Vacía\")\n\n\n\n\nMatriz con valores\n\nvalores <-  1:9\nmi_matriz <- matrix(data = valores, ncol= 3, nrow = 3) # crear una matriz\nmi_matriz\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nplot(raster(mi_matriz), col = heat.colors(9, rev = T),\n     main = \"Matriz con Valores\")\n\n\n\n\nla función matrix, tiene los siguientes argumentos:\n\ndata: The vector of values for the matrix (for example, 1:6)\nnrow: The number of rows\nncol: The number of columns (for example, 3)\nbyrow: Whether the matrix is filled column by column (FALSE, which is the default value) or row by row (TRUE)\n\nSubset sobre una Matriz\n\nx <- mi_matriz\nx[, c(1,3)] # leer todas las filas, y columnas 1 y 3\n\n     [,1] [,2]\n[1,]    1    7\n[2,]    2    8\n[3,]    3    9\n\nx[2, ] # devolver fila 2 como vector \n\n[1] 2 5 8\n\nx[2, , drop = FALSE] # devolver fila 2 como dataframe\n\n     [,1] [,2] [,3]\n[1,]    2    5    8\n\n\nTrasponer una matriz\n\nmi_matriz\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nt(mi_matriz)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\nAplicar funciones con apply() sobre una matriz\n\napply(x, MARGIN = 2, FUN = mean) # aplicar funciones \n\n[1] 2 5 8\n\n# MARGIN = 2 significar que se aplicarzá la función por columna\n# MARGIN = 1 significar que se aplicarzá la función por fila\n\nFunciones de alto performance (escritas en c++)\n\nx\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\ncolSums(x) #suma de columnas\n\n[1]  6 15 24\n\ncolMeans(x) # promedio por columna\n\n[1] 2 5 8\n\nx\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nrowSums(x) #Suma por fila\n\n[1] 12 15 18\n\nrowMeans(x) # promedio por fila\n\n[1] 4 5 6\n\n# PD: sirven también para dataframe y arrays\n\nEjemplo de martiz sin referencia espacial\n\nclass(volcano)\n\n[1] \"matrix\" \"array\" \n\ndim(volcano)\n\n[1] 87 61\n\nimage(volcano, col = terrain.colors(30), asp = ncol(volcano) / nrow(volcano))\ncontour(volcano, add = TRUE)\n\n\n\n\n\n# install.packages(\"plot3D\")\nlibrary(plot3D)\n# reducir dimensionalidad\nVolcano <- volcano[seq(1, nrow(volcano), by = 3),\n                     seq(1, ncol(volcano), by = 3)]\n\npersp(Volcano, theta = 40, phi = 40, col = \"orange\", border = NA, shade = 0.5)\n\n\n\n\nsubset (corte transversales)\n\nr30 = volcano[30, ]  # Row 30\nr60 = volcano[60, ]  # Row 60\nvolcan <-  volcano \nvolcan[60, ] <- NA\nvolcan[30, ] <- NA\n\npar(mfrow=c(1,2))\nimage(volcan, col = terrain.colors(30), asp = ncol(volcano) / nrow(volcano))\nplot(r30, type = \"l\", col = \"blue\", ylim = range(c(r30, r60)), ylab = \"Elevation (m)\")\nlines(r60, type = \"l\", col = \"red\")\n\n\n\npar(mfrow=c(1,1))\n\n\n\n3.2.7 Arrays\n\n\n\nRepresentan estructuras de datos con dos o mas dimensiones, y se crean con la función “array”. Crearemos un objeto de 2 filas, 2 columnas y 3 dimensiones.\n\n# ?array\nvalores <- 1:24\nvalores\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n\ny <- array(data = valores, dim =  c(2,4,3)) # dim(n_filas, , n_col, n_dimensiones(capas)) \ny\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]    9   11   13   15\n[2,]   10   12   14   16\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   19   21   23\n[2,]   18   20   22   24\n\n\nSubset un array\n\ny\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]    9   11   13   15\n[2,]   10   12   14   16\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   19   21   23\n[2,]   18   20   22   24\n\ny[2,1,3] # seleccionar fila 2, columna 1, dimensión 3\n\n[1] 18\n\ny[2,1,] # seleccionar fila 2, columna 1, de todas las dimensiones\n\n[1]  2 10 18\n\n\n\n\n3.2.8 Estructura de Datos de Raster\nUn raster es una grilla rectangular de valores numéricos referenciados en cierta extensión geográfica. Puede tener una (matriz) o múltiples bandas (arrays).\nEn R para el tratamiento de objetos Raster se utiliza el package raster, de acuerdo a contenidos programadas de esta clase solo veremos las funciones básicas, pero con ejemplos que representa el mundo real.\nCaracterística importante del package raster que tienen la capacidad de trabajar con grandes raster (de mayor peso que la RAM de nuestros Equipos), donde automáticamente escribe el archivo temporal en el disco duro.\n\n\n\n\n\nlibrary(raster)\n\nz <- raster() # crear un raster vacio\nz\n\nclass      : RasterLayer \ndimensions : 180, 360, 64800  (nrow, ncol, ncell)\nresolution : 1, 1  (x, y)\nextent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs"
  },
  {
    "objectID": "fundamentos_PR.html#sec-crearRaster",
    "href": "fundamentos_PR.html#sec-crearRaster",
    "title": "3  S1: Percepción Remota",
    "section": "3.3 Crear Raster",
    "text": "3.3 Crear Raster\nagregar argumentos\n\n?raster()\nx <- raster(ncol=36, nrow=18, # cantidad de filas y columnas\n            xmn=-1000, xmx=1000, ymn=-100, ymx=900)# extent (representación espacial)\nx\n\nclass      : RasterLayer \ndimensions : 18, 36, 648  (nrow, ncol, ncell)\nresolution : 55.55556, 55.55556  (x, y)\nextent     : -1000, 1000, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : NA \n\n# plot(x)\n\nResolución espacial\n\nres(x)\n\n[1] 55.55556 55.55556\n\nres(x) <- 100\nres(x)\n\n[1] 100 100\n\nx\n\nclass      : RasterLayer \ndimensions : 10, 20, 200  (nrow, ncol, ncell)\nresolution : 100, 100  (x, y)\nextent     : -1000, 1000, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : NA \n\n\nCambiar Numero de columnas (afecta la resolución)\n\nncol(x)\n\n[1] 20\n\nncol(x) <- 18\nncol(x)\n\n[1] 18\n\nres(x)\n\n[1] 111.1111 100.0000\n\n\ndefinir sistema de referencia de coordenadas\n\n### latlon Utilizado a escala mundial\ncrs_latlon <- \"+proj=longlat +datum=WGS84 +no_defs\"\n\n### utm utilizado a nivel regional (depende de la zona y hemisferio)\ncrs_utm <- \"+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\n\nprojection(x) <- crs_latlon\nx\n\nclass      : RasterLayer \ndimensions : 10, 18, 180  (nrow, ncol, ncell)\nresolution : 111.1111, 100  (x, y)\nextent     : -1000, 1000, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \n\n\nPero Hasta acá nuestro objeto Raster no tiene valores\n\nhasValues(x) # consultar si raster tiene valores\n\n[1] FALSE\n\nncell(x) #cantidad de celdas\n\n[1] 180\n\nvalues(x) <- 1:ncell(x) # ncell (cantidad de celdas del raster)\nx\n\nclass      : RasterLayer \ndimensions : 10, 18, 180  (nrow, ncol, ncell)\nresolution : 111.1111, 100  (x, y)\nextent     : -1000, 1000, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 1, 180  (min, max)\n\n\nVisualización\n\nlibrary(RColorBrewer)\n# display.brewer.all()\ncolores <- brewer.pal(n = 8, name = 'BrBG') # YlGnBu 'YlGnBu\npal_col <- colorRampPalette(c(colores))( 180 ) # 200 colores \nplot(x, col = pal_col)\n\n\n\nx\n\nclass      : RasterLayer \ndimensions : 10, 18, 180  (nrow, ncol, ncell)\nresolution : 111.1111, 100  (x, y)\nextent     : -1000, 1000, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 1, 180  (min, max)\n\n\nmodificación de valores del Raster\n\nset.seed(42)\nvalues(x) <- runif(ncell(x))\nplot(x, main = \"Raster de 180 celdas\", col = pal_col)\n\n\n\n\nFunciones\n\nhasValues(x)\n\n[1] TRUE\n\nres(x)\n\n[1] 111.1111 100.0000\n\ndim(x)\n\n[1] 10 18  1\n\nxmax(x)\n\n[1] 1000\n\nx\n\nclass      : RasterLayer \ndimensions : 10, 18, 180  (nrow, ncol, ncell)\nresolution : 111.1111, 100  (x, y)\nextent     : -1000, 1000, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 0.0002388966, 0.9888917  (min, max)\n\n\nCambiar el maximum de la coordenada x del extent (bounding box)\n\nxmax(x) <- 0\nhasValues(x)\n\n[1] TRUE\n\nres(x)\n\n[1]  55.55556 100.00000\n\ndim(x)\n\n[1] 10 18  1\n\nx\n\nclass      : RasterLayer \ndimensions : 10, 18, 180  (nrow, ncol, ncell)\nresolution : 55.55556, 100  (x, y)\nextent     : -1000, 0, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 0.0002388966, 0.9888917  (min, max)\n\nplot(x, main = \"Raster de 180 celdas\", col = pal_col)\n\n\n\n\nsi modifico ncol desaparece los valores\n\nncol(x) <- 10\nhasValues(x)\n\n[1] TRUE\n\nx\n\nclass      : RasterLayer \ndimensions : 10, 10, 100  (nrow, ncol, ncell)\nresolution : 100, 100  (x, y)\nextent     : -1000, 0, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 0.0002388966, 0.9888917  (min, max)\n\n# plot(x, col = pal_col)\n\n\n3.3.1 Operaciones básicas sobre un Raster\n\nOperaciones Básicas : **+, -, *, / **\nOperadores Lógicos >, >=, <, ==, !\nOtras Funciones: abs, round, ceiling, floor, trunc, sqrt, log, log10, exp, cos, sin, atan, tan, max, min, range, prod, sum, any, all.\n\n\nx\n\nclass      : RasterLayer \ndimensions : 10, 10, 100  (nrow, ncol, ncell)\nresolution : 100, 100  (x, y)\nextent     : -1000, 0, -100, 900  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 0.0002388966, 0.9888917  (min, max)\n\nvalues(x) <- 1:ncell(x)\nr <- x\ns <- r + 10\ns <- sqrt(s)\ns <- s * r + 5\n\n# plot(s, col = pal_col)\n\n\nr[] <- runif(ncell(r))\nr <- round(r)\n\nplot(r, col = pal_col)\n\n\n\n\n\n\n3.3.2 Funciones con calc\n\nr <- raster(ncol=3, nrow=2)\nr[] <- 1:ncell(r)\ngetValues(r)\n\n[1] 1 2 3 4 5 6\n\nas.matrix(r)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n# cambiar los valores menores de 4 a NA\ns <- calc(r, fun=function(x){ x[x < 4] <- NA; return(x)} )\nas.matrix(s)\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]    4    5    6\n\n\nFunciones con overlay (entre layers)\n\n# Overlay\nw <- overlay(r, s, fun=function(x, y){ x / (2 * sqrt(y)) + 5 } )\nas.matrix(w)\n\n     [,1]     [,2]     [,3]\n[1,]   NA       NA       NA\n[2,]    6 6.118034 6.224745\n\n\nFunciones con reclasify\n\n# Cambiar los valores entre 0 y 2 a 1, etc.\nx <- reclassify(w, c(0,2,1, \n                     2,5,2, \n                     4,10,3))\nas.matrix(x)\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]    3    3    3\n\n\nmodificaciones sobre raster volcán\n\nclass(volcano)\n\n[1] \"matrix\" \"array\" \n\ndim(volcano)\n\n[1] 87 61\n\nvolcan <- raster(volcano)\nvolcan\n\nclass      : RasterLayer \ndimensions : 87, 61, 5307  (nrow, ncol, ncell)\nresolution : 0.01639344, 0.01149425  (x, y)\nextent     : 0, 1, 0, 1  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : 94, 195  (min, max)\n\ncolores <- brewer.pal(n = 8, name = 'GnBu') # YlGnBu 'YlGnBu\npal_col <- colorRampPalette(colors = rev(colores))( 180 ) # 200 colores \nplot(volcan, col =pal_col)\n\n\n\n\nfunciones con volcán\n\n# View(as.matrix(volcan))\nvolcan_mod  <- calc(volcan, fun=function(x){ x[x < 100] <- NA; return(x)} )\nplot(volcan_mod, col =pal_col)\n\n\n\nvm <-  as.matrix(volcan_mod)\npersp(vm, theta = 40, phi = 10, col =  \"gold\", border = NA, shade = 0.5)\n\n\n\n# escenario de inundación\nvolcan_mod  <- calc(volcan, fun=function(x){ x[x > 120] <- NA; return(x)} )\nplot(volcan_mod, col =pal_col)\n\n\n\nvm <-  as.matrix(volcan_mod)\npersp(vm, theta = 40, phi = 10, col =  \"gold\", border = NA, shade = 0.5)\n\n\n\n\n\n\n3.3.3 Reclasificar con volcan\n\nvolcan\n\nclass      : RasterLayer \ndimensions : 87, 61, 5307  (nrow, ncol, ncell)\nresolution : 0.01639344, 0.01149425  (x, y)\nextent     : 0, 1, 0, 1  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : 94, 195  (min, max)\n\nrecla_vocan <- reclassify(x = volcan,\n                          rcl = c(0,100,NA, \n                                  100,140,1, \n                                  140,180,2,\n                                  180, 200, 3))\nplot(recla_vocan)\n\n\n\n\n\n\n3.3.4 Crear Raster Mulitibanda\n\n\n\nPara crear una raster multibanda (RasterLayer) utilizaremos la función stack()\n\nr1 <- r2 <- r3 <- raster(nrow=10, ncol=10)\n# Assign random cell values\nvalues(r1) <- runif(ncell(r1))\nvalues(r2) <- runif(ncell(r2))\nvalues(r3) <- runif(ncell(r3))\n\ns <- stack(r1, r2, r3)\ns\n\nclass      : RasterStack \ndimensions : 10, 10, 100, 3  (nrow, ncol, ncell, nlayers)\nresolution : 36, 18  (x, y)\nextent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nnames      :      layer.1,      layer.2,      layer.3 \nmin values : 0.0023781068, 0.0014338985, 0.0004050434 \nmax values :    0.9907958,    0.9802787,    0.9930453 \n\nnlayers(s)\n\n[1] 3\n\n\n\nb1 <- brick(r1, r2, r3)\n\nLeer un raster de ejemplo\n\nfilename <- system.file(\"external/test.grd\", package=\"raster\")\nfilename\n\n[1] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/raster/external/test.grd\"\n\nr_test <- raster(filename)\n# filename(r)\nhasValues(r_test)\n\n[1] TRUE\n\nplot(r_test, main='RasterLayer from file', col = pal_col)\n\n\n\n\n\nr1 <- r_test\nr2  <- calc(r_test, fun=function(x){ x[x < 500] <- NA; return(x)})\n\nr3 <- reclassify(x = r_test,\n                          rcl = c(0,300,1, \n                                  300,500,2, \n                                  500,1000,3,\n                                  1000, 2000, 4))\n\nbrick_raster <- brick(r1, r2, r3)\n\nVisualización dinámica\n\nlibrary(mapview)\npal = mapviewPalette(\"mapviewTopoColors\")\nm <- mapview(brick_raster, alpha = 0.5)\nm@map\n\n\n\n\n\n\n\n3.3.5 Guardar Raster\n\n# dir.create(path = \"data/raster\")\nwriteRaster(r_test, \"data/r_test1.tif\")"
  },
  {
    "objectID": "satelites_sensores.html#satélites",
    "href": "satelites_sensores.html#satélites",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.1 Satélites",
    "text": "4.1 Satélites\n\n4.1.1 Definición de Satélite\nUn satélite es una plataforma que describe una trayectoria definida alrededor de la Tierra denominada órbita. Existen dos tipos de satélites: geoestacionarios y heliosíncronos.\n\n\n\n\n\n\n\n4.1.2 Clasificación de Satélites por tipo de órbita\n\nGeoestacionarios:\n\nSobre la línea ecuatorial, a 36.000 km de la Tierra, realiza una vuelta alrededor de nuestro planeta al mismo tiempo que efectúa una rotación completa alrededor de su propio eje. Comunicaciones y meteorología.\n\n\n\n\n\n\n\n\nHeliosíncronos:\n\nÓrbitas circulares y polares relativo a la tierra a 160-2000 km. Captan imágenes con regularidad sobre un mismo punto o escena."
  },
  {
    "objectID": "satelites_sensores.html#sensores",
    "href": "satelites_sensores.html#sensores",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.2 Sensores",
    "text": "4.2 Sensores\n\n4.2.1 Definción de Sensor\nUn sensor es un instrumento a bordo de una plataforma capaz de adquirir remotamente información de diferentes regiones del espectro. Cada una de estas regiones se denomina canal o banda espectral. Existen dos tipos de sensores: activos y pasivos.\n\n\n4.2.2 Clasificación de Sensores\n\nSensores Activos:\n\nGeneran su propia radiación y la reciben reflejada (Radar y LiDAR)\n\nSensores Pasivos:\n\nMiden energía radiante reflejada o emitida por el sistema tierra- atmósfera. Ejemplo Landsat, Sentinel, MODIS.\n\n\n\n\n4.2.3 Características de los Sesores\nLa energía emitida o reflejada por la superficie terrestre es un fenómeno continuo en 4 cuatro dimensiones: espacio, tiempo, longitud de onda y radiancia.\n\nResolución espacial:\n\nTamaño del pixel o celda del raster que contiene a la banda espectral (Landsat: 30 m x 30 m)\n\nResolución temporal:\n\nTiempo entre imágenes sucesivas (Landsat 16 días)\n\nResolución espectral:\n\nNúmero y rango de las regiones del espectro electromagnético para los que capta información el sensor .\n\nResolución radiométrica:\n\nIndica el número de intervalos de intensidad que puede captar el sensor (escala de grises) (Landsat 5 y 7: 256)\n\n\n\n\n4.2.4 Resolución Espacial\nResolución espacial: Tamaño del pixel o celda del raster que contiene a la banda espectral (Landsat: 30 m x 30 m)\n\n\n\n\n\n\n\n4.2.5 Resolución Temporal:\nEl tiempo que tarda un satélite en completar un ciclo orbital; también conocido como “tiempo de revisita”.\n\n\n\n\n\nDepende de las capacidades, solapa de barrido y latitud del satélite/sensor. Algunos satélites pueden apuntar sus sensores y algunos además tienen una mayor solapa en latitudes superiores así que posiblemente tengan un mayor tiempo de repetición .\n\n\n4.2.6 Resolución Espectral:\nNúmero y rango de las regiones del espectro electromagnético para los que capta información el sensor.\n\n\n\n\n\nDescribe la habilidad del sensor de definir intervalos de longitudes de onda. Cuanto más fina la resolución espectral, más estrecha la gama de longitudes de onda para un canal o banda en particular. Tener más y más finos canales permite la percepción remota de diferentes partes de la superficie de la Tierra.\n\n\n4.2.7 Resolución Radiométrica:\nIndica el número de intervalos de intensidad que puede captar el sensor. El número máximo de niveles de luminosidad disponible depende del número de bits que se utilizan en la representación de la energía registrada.\n\n\n\n\n\nCuanto mayor este número, más alta la resolución radiométrica y más nítidas las imágenes, representada por números digitales positivos que varían del 0 a (uno menos que) alguna potencia de 2.\n\n\n\n\n \n  \n    Nro.Bits \n    Sensor \n    Potencias \n    Niveles \n  \n \n\n  \n    12 Bits \n    MODIS \n    2^12 \n    4096 niveles \n  \n  \n    10 Bits \n    AVHRR \n    2^10 \n    1024 niveles \n  \n  \n    8 Bits \n    Landsat TM (Thematic Mapper) \n    2^8 \n    256 niveles \n  \n  \n    6 Bits \n    Landsat MSS (Multispectral Scanner System) \n    2^6 \n    64 niveles"
  },
  {
    "objectID": "satelites_sensores.html#correcciones-en-imágenes-satelitales",
    "href": "satelites_sensores.html#correcciones-en-imágenes-satelitales",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.3 Correcciones en Imágenes Satelitales",
    "text": "4.3 Correcciones en Imágenes Satelitales\nLas imágenes satelitales se encuentran expuestas a una serie de interferencias que pueden llegar a perturbar la información espacial, principalmente asociadas a una serie de errores mecánicos de los sensores o a interferencias atmosféricas.\n\nCorrección radiométrica: Corrige fallos en los sensores.\nCorrección geométrica: Alteraciones en los movimientos de los satélites generan distorsiones en la imagen.\nCorrección topográfica: El efecto topográfico provoca una variación de la respuesta radiométrica de la superficie inclinada frente a la de una horizontal (efecto sombra)\nCorrección atmosférica: Corrige las interferencias atmosféricas (vapor de agua)\n\n\n\n\n\n\nAlgunos productos satelitales son diponibilizados con una o varias correcciones y dependendiendo los tipos de correcciones se dividen en niveles."
  },
  {
    "objectID": "satelites_sensores.html#satélites-más-utilizados",
    "href": "satelites_sensores.html#satélites-más-utilizados",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.4 Satélites más Utilizados",
    "text": "4.4 Satélites más Utilizados\n\n4.4.1 Landsat 8\n\n\n\n\n\nLandsat 8 es un satélite de observación terrestre estadounidense lanzado el 11 de febrero de 2013. operado en la colaboración de la NASA con el USGS. El estudio de los datos se realiza mediante dos sensores principales. El satélite opera en luz visible, infrarrojo cercano, infrarrojo de onda corta e infrarrojo térmico (de onda larga). Las bandas de Landsat 8 están configuradas en 11 diferentes en base a la longitud de onda de su visión.\n\n\n\n\n\nUno de los sensores del Landsat 8, Operational Land Imager (OLI), usa 9 bandas en el espectro de la luz visible y el infrarrojo cercano. Otro de los sensores del Landsat 8, Thermal InfraRed Sensor (TIRS), opera en el rango de infrarrojos de onda larga (Longwave InfraRed Light). El satélite proporciona imágenes con una resolución moderada que varía en diferentes bandas desde 15 m por píxel en la más precisa hasta 100 m en el infrarrojo de onda larga, donde la precisión no es vital.\n\n\n\n\n \n  \n    Banda \n    Nombre \n    Longitud_de_onda_(μm) \n    Resolución(m) \n  \n \n\n  \n    1 \n    Costera - Aerosoles \n    0.435 - 0.451 \n    30 \n  \n  \n    2 \n    Azul \n    0.452 - 0.512 \n    30 \n  \n  \n    3 \n    Verde \n    0.533 - 0.590 \n    30 \n  \n  \n    4 \n    Rojo \n    0.636 - 0.673 \n    30 \n  \n  \n    5 \n    Infrarrojo cercano (NIR) \n    0.851 - 0.879 \n    30 \n  \n  \n    6 \n    Infrarrojo de onda corta 1 (SWIR 1) \n    1.566 - 1.651 \n    30 \n  \n  \n    10 \n    (TIR 1) \n    10.60 - 11.19 \n    100 \n  \n  \n    11 \n    (TIR 2) \n    11.50 - 12.51 \n    100 \n  \n  \n    7 \n    Infrarrojo de onda corta 2 (SWIR 2) \n    2.107 - 2.294 \n    30 \n  \n  \n    8 \n    Pancromática \n    0.503 - 0.676 \n    15 \n  \n  \n    9 \n    Cirrus \n    1.363 - 1.384 \n    30 \n  \n\n\n\n\n\n\n\n4.4.2 Sentinel 2\n\n\n\n\n\nSentinel-2 es una misión de observación terrestre desarrollada por la ESA dentro del programa Copérnico. Está compuesto por dos satélites idénticos: Sentinel-2A (junio de 2015) y Sentinel-2B (marzo de 2017)\nCaracterísticas:\n\nImagen multiespectral datos con 13 bandas\nSentinel-2 realiza las labores cada 5 días, pero con diferentes ángulos de visión.\nLa resolución espacial de 10 m, 20 m y 60 m\nPolítica de datos libre y en abierto\n\n\n\n\n\n \n  \n    Banda \n    Nombre \n    Central.Wavelength \n    Resolución.m. \n  \n \n\n  \n    B1 \n    Ultra Blue (Coastal and Aerosol) \n    443 nm \n    60 m \n  \n  \n    B2 \n    Blue \n    490 nm \n    10 m \n  \n  \n    B3 \n    Green \n    560 nm \n    10 m \n  \n  \n    B4 \n    Red \n    665 nm \n    10 m \n  \n  \n    B5 \n    Visible and Near Infrared (VNIR) \n    705 nm \n    20 m \n  \n  \n    B6 \n    Visible and Near Infrared (VNIR) \n    740 nm \n    20 m \n  \n  \n    B7 \n    Visible and Near Infrared (VNIR) \n    783 nm \n    20 m \n  \n  \n    B8 \n    Visible and Near Infrared (VNIR) \n    842 nm \n    10 m \n  \n  \n    B8a \n    Visible and Near Infrared (VNIR) \n    865 nm \n    20 m \n  \n  \n    B9 \n    Short Wave Infrared (SWIR) \n    940 nm \n    60 m \n  \n  \n    B10 \n    Short Wave Infrared (SWIR) \n    1375 nm \n    60 m \n  \n  \n    B11 \n    Short Wave Infrared (SWIR) \n    1610 nm \n    20 m \n  \n  \n    B12 \n    Short Wave Infrared (SWIR) \n    2190 nm \n    20 m \n  \n\n\n\n\n\nMas referencias aquí\n\nFinalmente se presenta una comparación la resolución espectral Landsat 8 y Sentinel-2:"
  },
  {
    "objectID": "satelites_sensores.html#tratamiento-de-imágenes-satelitales",
    "href": "satelites_sensores.html#tratamiento-de-imágenes-satelitales",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.5 Tratamiento de Imágenes Satelitales",
    "text": "4.5 Tratamiento de Imágenes Satelitales\nA continuación se hara una serie de operaciones sobre una imagen satelital LANDSAT 8 recortada por un área de estudio correspondiente a la comuna de Las Condes.\n\n4.5.1 Lectura de Imagen Satelital\n\nlibrary(raster)\nLC <- brick(\"data/raster/OLI_LC.tif\")\nnames(LC) <- c(\"aerosol\",\"blue\", \"green\", \"red\", \"nir\", \"swir1\", \"swir2\", \"tir1\" )\nLC\n\nclass      : RasterBrick \ndimensions : 449, 562, 252338, 8  (nrow, ncol, ncell, nlayers)\nresolution : 30, 30  (x, y)\nextent     : 350505, 367365, 6293905, 6307375  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs \nsource     : OLI_LC.tif \nnames      : aerosol,  blue, green,   red,   nir, swir1, swir2,  tir1 \nmin values :    8465,  7604,  6500,  5924,  5520,  5191,  5197,  5002 \nmax values :   19119, 20517, 21248, 23237, 29344, 30012, 31166,  5512 \n\n\n\n\n4.5.2 Visualización Básica Imagen Satelital\n\n\n\n\n# Color Natural\nplotRGB(LC, r = 4, g = 3, b = 2, stretch = \"lin\")\n\n\n\n\n\nlibrary(mapview)\nviewRGB(LC,   r = 4, g = 3, b = 2)\n\n\n\n\n\n\n\n4.5.3 Reproyección de Imagen Satelital\nDefinir Sistemas de Referencias como variables\n\n### latlon Utilizado a escala mundial\ncrs_latlon <- \"+proj=longlat +datum=WGS84 +no_defs\"\n\n### utm utilizado a nivel regional (depende de la zona y hemisferio)\ncrs_utm <- \"+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\n\nLC_ll <- raster::projectRaster(LC, crs = crs_latlon)\n\n\n\n4.5.4 Recorte Imagen Satelital\n\n## crop y mask\n# ext <- drawExtent()\next <- extent(c(350638, 358235,  6299157, 6304228))\nLC_crop <- crop(x = LC, y = ext, snap=\"out\")\n# LCondes <- mask(r2, ext)\nplotRGB(LC_crop, r = 4, g = 3, b = 2, stretch = \"lin\")\n\n\n\n\n\n\n4.5.5 Combinaciones de Bandas de Imagen Satelital\n\n\n\nNúmero de bandas asignado a la Imagen OLI Landsat\n\naerosol = 1\nblue = 2\ngreen = 3\nred = 4\nnir = 5\nswir1 = 6\nswir2 = 7\nthermal = 8\n\nLas Condes: Color Natural (4,3,2)\n\nplotRGB(LC, r = 4, g = 3, b = 2, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Falso Color (7,6,4)\n\nplotRGB(LC, r = 7, g = 6, b = 4, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Infrarojo (5,4,3)\n\nplotRGB(LC, r = 5, g = 4, b = 3, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Agricultura (6,5,2)\n\nplotRGB(LC, r = 6, g = 5, b = 2, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Penetración de la Radiación en la Atmósfera (7,6,5)\n\nplotRGB(LC, r = 7, g = 6, b = 5, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Uso del Suelo / Masas de Agua (5,6,4)\n\nplotRGB(LC, r = 5, g = 6, b = 4, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Infrarojo de Onda Corta (7,5,4)\n\nplotRGB(LC, r = 7, g = 5, b = 4, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Análisis de Vegetación (6,5,4)\n\nplotRGB(LC, r = 6, g = 5, b = 4, stretch = \"lin\")\n\n\n\n\n\n\n\n\nLas Condes: Análisis de Vegetación Sana (5,6,2)\n\nplotRGB(LC, r = 5, g = 6, b = 2, stretch = \"lin\")"
  },
  {
    "objectID": "satelites_sensores.html#ndvi",
    "href": "satelites_sensores.html#ndvi",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.6 NDVI",
    "text": "4.6 NDVI\n\n4.6.1 Cálculo de NDVI\n\n\n\n\nFormula para el cáculo de NDVI\n\n\n\nMetódo 1\n\n#NDVI(img, red, NIR)\nNDVI <- function(img, r, n) {\n   br <- img[[r]]\n   bn <- img[[n]]\n   vi <- (bn - br) / (bn + br)\n   return(vi)\n}\nNDVI_lc <- NDVI(LC, 4, 5)\nplot(NDVI_lc , main = \"NDVI Las Condes\")\n\n\n\n\n\n\n4.6.2 Histograma de valores NDVI\n\n# dev.off()\nhist(NDVI_lc, col=\"springgreen4\", main=\"Histograma NDVI Las Condes\",\n  ylab=\"Numero de Pixeles\", xlab=\"valor NDVI\")\n\n\n\n\n\n\n\n\n\n\n4.6.3 reclasificación de NDVI\nTodo lo que sea igual o menor que value será lo demàs conserva su valor\n\ncorte_eq_menor<- function(value) {\n  function(x){ifelse(x <= value,NA, x)}\n}\nvegetacion <- calc(NDVI_lc, fun = corte_eq_menor(value = 0.4))\nplot(vegetacion)"
  },
  {
    "objectID": "satelites_sensores.html#visualización-avanzada-de-raster",
    "href": "satelites_sensores.html#visualización-avanzada-de-raster",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.7 Visualización Avanzada de Raster",
    "text": "4.7 Visualización Avanzada de Raster\n\n4.7.1 Visualziación Estática\nZonas de Vegetación ALta en Las Condes\n\n# crear una paleta de colores con 200 niveles \npal_green <- colorRampPalette(c(\"green\",\"springgreen4\", \"darkgreen\"))( 200 )\nplot(vegetacion , main = \"NDVI Vegetación Alta\", col = pal_green)\n\n## agregar Las polígono de Las Condes\nLasCondes <- sf::st_read(\"data/shape/LasCondes.shp\")\n\nReading layer `LasCondes' from data source \n  `/Users/denisberroeta/Library/CloudStorage/OneDrive-UniversidadAdolfoIbanez/CIT/DOCENCIA/CURSO_SII_PR/book_PR_SII/data/shape/LasCondes.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 350513.9 ymin: 6293910 xmax: 367354.6 ymax: 6307356\nProjected CRS: WGS 84 / UTM zone 19S\n\nplot(LasCondes$geometry, add = T, )\n\n\n\n\n### Visualización Dinámica\nVersión con Mapview\n\n# install.packages(\"mapview\")\n\nmview <- mapview(LasCondes, color = \"#05A39B\", alpha.region =0)+\n  viewRGB(LC, r = 4, g = 3, b = 2, na.color = \"transparent\")+ \n  mapview(vegetacion, na.color = \"transparent\") +\n  mapview(NDVI_lc, na.color = \"transparent\") \n\n  \nmview\n\n\n\n\n\n# Mostrar opciones de guardar resultados dinámicos\n\nbonus guardar html\n\nmapshot(x = mview, url = \"mapa_veg.html\")\n\nVersión con librería Leaflet (compleja)\n\nsuppressPackageStartupMessages(library(leaflet))\nNDVI_lc_ll <- projectRaster(vegetacion, \n                            crs = \"+proj=longlat +datum=WGS84 +no_defs\")\n\nLasCondes <- sf::st_transform(LasCondes, crs_latlon)\n\n# se construye una función para asignar valores dado un valor\npal <- colorNumeric(c(\"green\",\"springgreen4\", \"darkgreen\"), \n                    values(NDVI_lc_ll), na.color = \"transparent\")\n\nmap <- leaflet() %>% \n  addTiles(group = \"OSM (default)\") %>%  \n  addProviderTiles(providers$Stamen.Toner, group = \"Toner\") %>%\n  addProviderTiles(providers$Stamen.TonerLite, group = \"Toner Lite\") %>%\n  addProviderTiles(providers$Esri.WorldImagery, group = \"Satellite\")%>%\n  addRasterImage(NDVI_lc_ll, colors = pal, opacity = 1, group = \"NDVI\") %>%\n  addLegend(position = \"bottomright\", pal = pal, values = values(NDVI_lc_ll),\n            opacity = 1, group = \"NDVI\", title = \"NDVI\")%>%\n  addPolygons(data = LasCondes, color =  \"navy\", \n              fillOpacity = 0, weight = 3)%>%\n  addLayersControl(position = \"topright\",\n                   baseGroups = c(\"Toner Lite\",\"Satellite\", \n                                  \"OSM (default)\", \"Toner\"),\n                   overlayGroups = \"NDVI\",\n                   options = layersControlOptions(collapsed = TRUE))\nmap"
  },
  {
    "objectID": "satelites_sensores.html#repasar-instalación-de-rgee",
    "href": "satelites_sensores.html#repasar-instalación-de-rgee",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.8 Repasar Instalación de Rgee",
    "text": "4.8 Repasar Instalación de Rgee\nInstalar Librerías Previas\n\ninstall.packages(\"reticulate\")\ninstall.packages(\"jsonlite\")\n\nInstalar Rgee\n\ninstall.packages(\"remotes\")\nremotes::install_github(\"r-spatial/rgee\", force = TRUE)\ninstall.packages(\"rgee\")\n\nInstalar Ambiente Virtual\n\n## It is necessary just once\nee_install() \n\n# indicar \"Yes\"\n# Ahora de debe reiniciar Rstudio\n\nTest de Instalación Correcta\n\nlibrary(tidyverse)\nlibrary(rgee)\nlibrary(sf)\nee_Initialize()\n\n── rgee 1.1.5 ─────────────────────────────────────── earthengine-api 0.1.335 ── \n ✔ user: not_defined\n ✔ Initializing Google Earth Engine:\n ✔ Initializing Google Earth Engine:  DONE!\n\n ✔ Earth Engine account: users/denisberroeta \n──────────────────────────────────────────────────────────────────────────────── \n\ncreateTimeBand <-function(img) {\n  year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)\n  ee$Image(year)$byte()$addBands(img)\n}\n\ncollection <- ee$\n  ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$\n  select('stable_lights')$\n  map(createTimeBand)\n\ncol_reduce <- collection$reduce(ee$Reducer$linearFit())\ncol_reduce <- col_reduce$addBands(\n  col_reduce$select('scale'))\n# ee_print(col_reduce)\n\n\nMap$setCenter(9.08203, 47.39835, 3)\nm <- Map$addLayer(\n  eeObject = col_reduce,\n  visParams = list( bands = c(\"scale\", \"offset\", \"scale\"),\n                    min = 0,    max = c(0.18, 20, -0.18)),\n  name = \"stable lights trend\")\nm"
  },
  {
    "objectID": "satelites_sensores.html#referencias",
    "href": "satelites_sensores.html#referencias",
    "title": "4  S2: Satélites y Sensores",
    "section": "4.9 Referencias",
    "text": "4.9 Referencias\nLearning R for Geoespatial Analysis\nhttps://rspatial.org/raster/spatial/8-rastermanip.html\nReferencias de Mapview\nhttps://r-spatial.github.io/mapview/reference/index.html\nReferencias de Leaflet\nhttps://rstudio.github.io/leaflet/"
  },
  {
    "objectID": "tarea_1.html#antecedentes",
    "href": "tarea_1.html#antecedentes",
    "title": "Tarea 1",
    "section": "Antecedentes",
    "text": "Antecedentes\nFecha de Entrega: 05 de Mayo del 2023\nFormato de Entrega: Documento de texto (word, pdf, markdown) + códigos (.R)\nIntegrantes: 2 Personas"
  },
  {
    "objectID": "tarea_1.html#enuncuciado",
    "href": "tarea_1.html#enuncuciado",
    "title": "Tarea 1",
    "section": "Enuncuciado",
    "text": "Enuncuciado\n\nCrear un raster de ncol = 500, nrow = 500, projection = crs_utm (objeto creado anteriormente), valores aleatorios y plot. (2 puntos).\n\n\n\n\n\n\n\nTip: Section 3.3\n\n\n\n\n\n\n\n\nDesde el raster “r_test”, crear una copia pero con la raiz cuadrada de los valores originales, y si existe un valor de pixel mayor a 35 debe ser cambiado por 35, finalmente plot (2 Puntos).\n\n\n\n\n\n\n\nTip: Section 3.3.2)\n\n\n\n\n\n\n\n\nDesde el raster “r_test”, crear una copia y reclasificar todos sus valores, de 0 a 500 valor 1, 501 a 1000 valor 2, 1001 a 1500 valor 3, mayor a 1500 será 4, finalmente plot (2 puntos). (Hint: )\n\n\n\n\n\n\n\nTip: Section 3.3.3"
  },
  {
    "objectID": "tarea_1.html#adicional",
    "href": "tarea_1.html#adicional",
    "title": "Tarea 1",
    "section": "Adicional",
    "text": "Adicional\nSe les recuerda seguir el manual de instalación del librería rgee que se encuentra en el siguiente anexo Appendix G"
  },
  {
    "objectID": "tarea_1.html#referencias",
    "href": "tarea_1.html#referencias",
    "title": "Tarea 1",
    "section": "Referencias",
    "text": "Referencias\nLearning R for Geoespatial Analysis\nhttps://rspatial.org/raster/spatial/8-rastermanip.html\nhttps://r-spatial.github.io/mapview/"
  },
  {
    "objectID": "intro_R.html#qué-es-r-project",
    "href": "intro_R.html#qué-es-r-project",
    "title": "Appendix A — Introducción a R",
    "section": "A.1 ¿Qué es R Project?",
    "text": "A.1 ¿Qué es R Project?\nR es un lenguaje programación multiparadigma (procedural, imperativo, orientado a objetos y funcional) enfocado a aplicaciones estadísticas. Por estadísticas se debe entender también los campos de estudio que se basan o las utilizan como económía, finanzas, ciencia de datos, machine learning, etc.\n\nA.1.1 Ventajas de Utilizar R Project\n1. R es un software libre\n\nLa libertad de ejecutar el programa como desee y con cualquier propósito\nEstudiar el funcionamiento del programa y adaptarlo a sus necesidades.\nRescribir copias para ayudar a los demás.\nManejar el programa y publicar las mejorar, de manera que toda comunidad se beneficie.\n\n2. R es multiplataforma\n\nR funciona en Mac, Windows y en numerosos sistemas UNIX. Esto significa que cualquier persona puede trabajar con tus datos, figuras, análisis y más importante aún usar tus instrucciones (también conocido como scripts o código) para generar las figuras y el análisis. Así que cualquier persona, y en cualquier lugar del mundo, con acceso a cualquier SO puede usar R sin ninguna licencia.\n\n3. R es de código abierto\n\nExiste una gran comunidad de voluntarios trabajando para mejorarlo, lo cual permite ser moldeado y dirigido a cuestiones específicas. Creando así programas y paquetes que funcionen en el entorno R. Programas tales como R-studio, Java GUI for R, R- commander, RKWard, entre otros, y con más de 18000 paquetes indexado en CRAN, Biocoductor, GitHub y R-Forge.\n\n4. Todo dentro de un mismo entorno\n\nR remplaza la combinación de varios programas para el proceso de análisis de datos, por ejemplo Excel, ArcGis, QGis, SigmaPlot, entre otros. Esto no solo resulta en el alto costo de las licencias de múltiples programas, si no también, en la gran cantidad de archivos con diferentes formatos que no podrían leer otros programas. En cambio con solo utilizar R, puedes realizar todo el análisis de datos e inclusive leer archivos de diferentes formatos.\n\n\n\nA.1.2 Desventajas de utilizar R\n\nR tiene una vasta documentación de ayuda, descripción de paquetes y de funciones, que es difícil encontrar información específica en un momento dado.\nLos mensajes de error que R nos muestra, no es específica sobre los fallos que estamos realizando y solo un usuario con cierta experiencia en el uso de R puede saberlo."
  },
  {
    "objectID": "intro_R.html#instalación-de-r-project",
    "href": "intro_R.html#instalación-de-r-project",
    "title": "Appendix A — Introducción a R",
    "section": "A.2 Instalación de R Project",
    "text": "A.2 Instalación de R Project\n\nA.2.1 Instalación de R Project\nPrimero se debe instalar R Project desde su sitio oficial (https://cran.r-project.org/bin/windows/base/), se ejecuta el instalador que se descargó depende del sistema operativo del PC, como se muestra en las siguientes figuras:\n\n\n\nA.2.2 Instalación de R para Windows\n\n\n\n\n\nA.2.3 Instalar Rtools (solo Sistema Operativo Windows)\n\n\n\n\n\n\n\n\nA.2.4 Instalación de R para Mac\n\n\n\nR Project Ejecutándose"
  },
  {
    "objectID": "intro_R.html#instalación-de-rstudio",
    "href": "intro_R.html#instalación-de-rstudio",
    "title": "Appendix A — Introducción a R",
    "section": "A.3 Instalación de RStudio",
    "text": "A.3 Instalación de RStudio\nSe recomienta instalar Rstudio, que es Interfaz de Usuario de R Project, desde su sitio web oficial, el cual permite acceder con mayor facilidad a sus funciones y potencialidades de R.\n\n\n\n\n\n\n\n\n\nA.3.1 RStudio Cloud\nRStudio Cloud es una versión ligera del IDE RStudio alojada en la la nube que permite a cualquiera hacer, compartir, enseñar y aprender Ciencias de Datos Online. Tiene una versión gratuita limitada.\n\nA.3.1.1 Características:\n\nAnalyze your data using the RStudio IDE, directly from your browser.\nShare projects with your team, class, workshop or the world.\nTeach data science with R to your students or colleagues.\nLearn data science in an instructor-led environment or with interactive tutorials."
  },
  {
    "objectID": "intro_R.html#instalar-librerías",
    "href": "intro_R.html#instalar-librerías",
    "title": "Appendix A — Introducción a R",
    "section": "A.4 Instalar Librerías",
    "text": "A.4 Instalar Librerías\n\nA.4.1 Librerías en R\nLas librerías o paquetes en R corresponden a una colección de funciones encapsuladas y diseñadas para atender una tarea específica. Por ejemplo, hay paquetes para trabajo visualización geoespacial, análisis psicométricos, mineria de datos, interacción con servicios de internet y muchas otras cosas más.\nEstos paquetes se encuentran alojados principalmente en CRAN (Comprehensive R Archive Network), así que pasan por un control riguroso antes de estar disponibles para su uso generalizado, al día de hoy (29.11.2021) existen 18498 paquetes disponibles. En el siguiente enlace se deja una lista de temas y sus librerías asociadas disponibles, con una breve descripción (enlace)\nAunque las versiones de prueba de una librería pueden estar disponible en Github (Respositorio de Control de Versiones) de cada autor.\n\n\nA.4.2 Ejemplo de Instalación de Librerías desde R\nPodemos instalar paquetes usando la función install.packages(), dando como argumento el nombre del paquete que deseamos instalar, entre comillas.\nPara instalar librerías se puede hacer directamente desde la consola de RStudio, por ejemplo:\n\ninstall.packages(\"dplyr\") # Se puede instalar más de una librería a la vez\n\n\n\nA.4.3 Ejemplo de Instalación de Librerías desde Rstudio\nTambién se pude instalar librerías del Panel “Packages”\n\n\n\nY por último se puede instalar desde Pestaña “Tools” -> “Install Packages”:"
  },
  {
    "objectID": "intro_R.html#definición-de-directorios-de-trabajos",
    "href": "intro_R.html#definición-de-directorios-de-trabajos",
    "title": "Appendix A — Introducción a R",
    "section": "A.5 Definición de Directorios de Trabajos",
    "text": "A.5 Definición de Directorios de Trabajos\nDefinir directorio de Trabajo con RStudio\n\n\n\n\n\n\nDefinir Directorio de Trabajo con una función\n\nsetwd(\"~/OneDrive - Universidad Adolfo Ibanez/CIT/DOCENCIA/CLASES_SII/\")\n\nConsultar Directorio de Trabajo\n\ngetwd()\n\n[1] \"/Users/denisberroeta/Library/CloudStorage/OneDrive-UniversidadAdolfoIbanez/CIT/DOCENCIA/CURSO_SII_PR/book_PR_SII\""
  },
  {
    "objectID": "variables_R.html#tipos-de-objetos-en-r",
    "href": "variables_R.html#tipos-de-objetos-en-r",
    "title": "Appendix B — Variables en R",
    "section": "B.1 Tipos de Objetos en R",
    "text": "B.1 Tipos de Objetos en R\nLos Datos en R se pueden clasificar por su dimensiones y los tipos de Datos que permiten almacenar, como se muestra en la siguiente tabla:\n\n\n\nDimensiones\nHomogéneos\nHeterogéneos\n\n\n\n\n1d\nAtomic vector\nList\n\n\n2d\nMatrix\nData frame\n\n\nnd\nArray\n\n\n\n\nFuente: http://adv-r.had.co.nz/Data-structures.html\nR nos permite definir variables que pueden ser luego usadas en las distintas operaciones. El lenguaje no solo permite definir escalares (variable de un numero), si no también variables que sean un conjunto de numero o caracteres ordenados.\n\nB.1.1 Variables Numéricas\n\n# La asignación en R son válidos 2 métodos '<-' o '='\nx <- 7 # Definir variable (escalar) x que sea igual a 7\nx # Mostrar que es x\n\n[1] 7\n\ny <- 3 + 2 * x # Crear y como funcion de x \ny\n\n[1] 17\n\nclass(y)\n\n[1] \"numeric\"\n\n\nNúmeros Random con decimales\n\nru <- runif(n = 100, min = 1, max = 10)\nru\n\n  [1] 2.378592 8.510668 1.009644 7.976634 9.943159 6.826385 2.349774 4.887281\n  [9] 9.224942 5.101946 5.549782 3.337785 1.575982 4.212779 1.616465 6.772491\n [17] 5.091897 9.019967 9.595348 1.643052 4.793826 6.236573 4.504640 6.305901\n [25] 3.539953 5.068927 2.075049 4.647722 6.344421 5.327990 1.483521 8.084054\n [33] 2.352486 2.897160 8.470597 1.952818 5.324283 4.391858 8.717886 9.982485\n [41] 9.646472 4.454391 8.488909 6.099597 1.763380 4.553654 7.954823 1.826720\n [49] 1.085700 6.542766 4.308642 8.536859 9.574968 5.988494 8.142264 5.198851\n [57] 6.384469 4.400692 6.086543 5.025479 9.164648 5.556339 1.540107 7.781352\n [65] 9.611179 5.577390 1.465600 3.850201 2.346290 2.298495 1.417812 4.722531\n [73] 2.829685 2.777924 3.602798 9.203853 3.377204 4.910709 7.660788 8.982710\n [81] 8.428206 8.177204 6.783775 8.367895 6.940398 5.985600 7.260242 5.747590\n [89] 1.771847 2.574074 6.616360 4.714753 1.383631 3.730313 2.301753 1.338139\n [97] 5.804128 6.565664 8.290136 2.751328\n\n\n\nhist(ru, breaks = 20, col = \"orange\", border = \"gray60\", \n     main = \"Histograma de valores Random\")\n\n\n\n\n\n\n\n\nNúmeros Random Enteros\nSimular los lanzamientos de un dado\n\nsample.int(n = 6, size = 10, replace = T)\n\n [1] 3 6 1 1 3 4 5 6 5 1\n\n\n\n\nB.1.2 Variables de Caracter\n\nch <- \"Chile\" # Definir variable (objeto) ch que sea la palabra \"Chile\"\nsn <- \"Santiago\"\nch # Mostrar ch\n\n[1] \"Chile\"\n\nsn\n\n[1] \"Santiago\"\n\n\nUnir variables de texto con paste()\n\nch <- \"Chile\" # Definir variable (objeto) ch que sea la palabra \"Chile\"\nsn <- \"Santiago\"\nunion <- paste(sn,ch, sep = \", \")\nunion\n\n[1] \"Santiago, Chile\"\n\n\nUtilizar paste0()\n\nunion <- paste(\"Provincia de \", sn,ch, sep = \", \")\nunion\n\n[1] \"Provincia de , Santiago, Chile\"\n\nunion0 <- paste0(\"Provincia de \", sn, \", \", ch)\nunion0\n\n[1] \"Provincia de Santiago, Chile\"\n\n\nBuscar y reemplazar con gsub\n\nav <- \"Av. Apoquindo\"\ncomuna <- \"comuna de Las Condes\"\ncalle <- paste(av, comuna, union0, sep = \", \")\ncalle\n\n[1] \"Av. Apoquindo, comuna de Las Condes, Provincia de Santiago, Chile\"\n\n# reemplazar Av. por Avenida\ncalle_new <- gsub(pattern = \"Av.\", replacement = \"Avenida\", x = calle)\ncalle_new\n\n[1] \"Avenida Apoquindo, comuna de Las Condes, Provincia de Santiago, Chile\""
  },
  {
    "objectID": "variables_R.html#estructuras-de-datos",
    "href": "variables_R.html#estructuras-de-datos",
    "title": "Appendix B — Variables en R",
    "section": "B.2 Estructuras de Datos",
    "text": "B.2 Estructuras de Datos\nLas variables pueden ser un conjunto de números y caracteres ordenados de varias maneras. El orden que se les da depende de lo que queremos lograr con estos.\n\nVector\nMatrices\nDataframes\nFactores\nListas\n\n\nB.2.1 Vectores\nVector Cadenas unidimensionales (es decir una sola columna o fila) de un tipo único de valores (numéricos, caracteres, etc.)\n\nvec <-  c(4, 3, 1, 5, 8, 16)\nvec\n\n[1]  4  3  1  5  8 16\n\nclass(vec)\n\n[1] \"numeric\"\n\nstr(vec)\n\n num [1:6] 4 3 1 5 8 16\n\n\nPodemos seleccionar parte del vector:\n\n# EL primer índice en R es 1 (en otros lenguajes de programación es 0)\nvec[3]\n\n[1] 1\n\n\nLa selección también puede ser hecha con una condición, de tal manera que solo seleccione aquella parte del vector que cumple con la condición.\nMayor a:\n\nvec[vec >= 4]\n\n[1]  4  5  8 16\n\n\nContenido en:\n\nvec[vec %in% c(3, 8, 7, 29)]\n\n[1] 3 8\n\n\nNegación de la condición:\n\nvec[!vec <= 3]\n\n[1]  4  5  8 16\n\n\nTambién podemos realizar operaciones matemáticas simples aplicadas al vector, por ejemplo una suma:\n\nvec2  <-  c(7, 10, 1)\nvec + vec2\n\n[1] 11 13  2 12 18 17\n\n\n\n\nB.2.2 Listas\nSon estructuras eficientes y flexibles, que permiten combinar distintas clases de elementos :\n\nlista <-  list(1, 2, 3, \"cosa\", x, y)\nlista\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n\n[[4]]\n[1] \"cosa\"\n\n[[5]]\n[1] 7\n\n[[6]]\n[1] 17\n\nstr(lista)\n\nList of 6\n $ : num 1\n $ : num 2\n $ : num 3\n $ : chr \"cosa\"\n $ : num 7\n $ : num 17\n\n\n\n#Tambien se puede seleccionar parte de una lista, usando el doble corchete:\nlista[[3]]\n\n[1] 3\n\n\nComo inspeccionar una lista con Rstudio\n\n\n\n\n\nB.2.3 Matrices\nSon estructuras de datos con 2 dimensiones, horizontal y la vertical (filas y columnas). Podemos construirlas usando la función “matrix”, con un vector inicial y sus dimensiones:\n\nn <- matrix(c(1.3, 2.8, 3.5, 6.4, 5.3, 6.2, 7, 4.5, 2.4, 6.3, 5.6, 5.3, 6.6, 7, 4.3),\n  nrow = 5, ncol = 3, byrow = TRUE)\nn\n\n     [,1] [,2] [,3]\n[1,]  1.3  2.8  3.5\n[2,]  6.4  5.3  6.2\n[3,]  7.0  4.5  2.4\n[4,]  6.3  5.6  5.3\n[5,]  6.6  7.0  4.3\n\n\nLa matriz tiene 2 dimensiones, por lo que para seleccionar partes de ella es necesario declarar dos dimensiones separadas por una coma. A la izquierda van las filas y a la derecha las columnas. Un valor vacío indica que se seleccionan todos los valores posibles.\n\nn[1,2]\n\n[1] 2.8\n\n\n\nn[,3]\n\n[1] 3.5 6.2 2.4 5.3 4.3\n\n\n\n\nB.2.4 Dataframes\nEstructura mas clásica de datos, es una matriz pero con mas atributos como nombres de columna y/o fila. Es lo mas similar en R a una tabla excel o la tabla de atributos. La manera mas simple de crear un dataframe es a partir de una matriz usando la función as.data.frame() :\n\ndf<- as.data.frame(n)\ndf\n\n   V1  V2  V3\n1 1.3 2.8 3.5\n2 6.4 5.3 6.2\n3 7.0 4.5 2.4\n4 6.3 5.6 5.3\n5 6.6 7.0 4.3\n\n\nPodemos asignar nombres a las columnas del dataframe\n\nnames(df)<- c(\"control_1\",\"control_2\",\"examen\")\ndf\n\n  control_1 control_2 examen\n1       1.3       2.8    3.5\n2       6.4       5.3    6.2\n3       7.0       4.5    2.4\n4       6.3       5.6    5.3\n5       6.6       7.0    4.3\n\n\nY a las filas del dataframe\n\ndf$alumno <- c(\"Sofia\",\"Tomas\",\"Luciano\",\"Julian\",\"Gabriela\")\ndf\n\n  control_1 control_2 examen   alumno\n1       1.3       2.8    3.5    Sofia\n2       6.4       5.3    6.2    Tomas\n3       7.0       4.5    2.4  Luciano\n4       6.3       5.6    5.3   Julian\n5       6.6       7.0    4.3 Gabriela\n\n\nTambién podemos realizar operaciones entre vectores del dataframe:\n\ndf$promedio_final <-  0.3*df$control_1 + 0.3*df$control_2 + 0.4*df$examen\ndf\n\n  control_1 control_2 examen   alumno promedio_final\n1       1.3       2.8    3.5    Sofia           2.63\n2       6.4       5.3    6.2    Tomas           5.99\n3       7.0       4.5    2.4  Luciano           4.41\n4       6.3       5.6    5.3   Julian           5.69\n5       6.6       7.0    4.3 Gabriela           5.80"
  },
  {
    "objectID": "funciones.html#operaciones-básicas-en-r",
    "href": "funciones.html#operaciones-básicas-en-r",
    "title": "Appendix C — Funciones en R",
    "section": "C.1 Operaciones Básicas en R",
    "text": "C.1 Operaciones Básicas en R\n\nC.1.1 Operaciones Matemáticas\nEn R, es posible realizar operaciones matemáticas básicas utilizando los operadores aritméticos estándar. Estos operadores incluyen:\n\nSuma (+): se utiliza para sumar dos valores.\nResta (-): se utiliza para restar un valor de otro.\nMultiplicación (*): se utiliza para multiplicar dos valores.\nDivisión (/): se utiliza para dividir un valor por otro.\nExponenciación (^): se utiliza para elevar un valor a una potencia.\nMódulo (%%): se utiliza para encontrar el resto de la división de un valor por otro.\n\nEstos operadores se pueden utilizar con números enteros, decimales y variables numéricas. Además, también se pueden utilizar paréntesis para especificar el orden de las operaciones.\nA continuación, se presentan algunos ejemplos de operaciones matemáticas básicas en R:\n\n# Suma\n2 + 3 # resultado: 5\n\n[1] 5\n\n# Resta\n5 - 2 # resultado: 3\n\n[1] 3\n\n# Multiplicación\n2 * 4 # resultado: 8\n\n[1] 8\n\n# División\n10 / 2 # resultado: 5\n\n[1] 5\n\n# Exponenciación\n2^3 # resultado: 8\n\n[1] 8\n\n# Módulo\n15 %% 4 # resultado: 3\n\n[1] 3\n\n# Utilizando paréntesis para especificar el orden de las operaciones\n(2 + 3) * 4 # resultado: 20\n\n[1] 20\n\n\nEs importante tener en cuenta que R sigue las reglas de precedencia de las operaciones matemáticas. Esto significa que las operaciones dentro de los paréntesis se evalúan primero, seguidas de la exponenciación, la multiplicación y la división, y finalmente la suma y la resta. Si se requiere un orden específico de operaciones, se deben utilizar paréntesis para indicarlo.\nAdemás, R también cuenta con una variedad de funciones matemáticas incorporadas, como “sin”, “cos”, “tan”, “log”, “exp”, entre otras, que se pueden utilizar para realizar operaciones más complejas.\nTambién se pueden aplica a un elemento a al objeto espacial completo\n\na <- 13\nb <- c(20,30,22,2,1)\n\nsum(b) # suma\n\n[1] 75\n\nsqrt(b) # find the square root of x\n\n[1] 4.472136 5.477226 4.690416 1.414214 1.000000\n\n\n\nmean(b)\n\n[1] 15\n\nmin(b)\n\n[1] 1\n\nmax(b)\n\n[1] 30\n\n\n\n\nC.1.2 Funciones Útiles de propósito general\n\nrep(1, 10)\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\nrep(\"HAHA\", 10)\n\n [1] \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\"\n\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1, 10, by = 2)\n\n[1] 1 3 5 7 9\n\nifelse(3 > 5, 1, \"this is false\")\n\n[1] \"this is false\"\n\n\n\npaste(\"Hola\", \"amigo\")\n\n[1] \"Hola amigo\"\n\npaste(\"Hello\", \"amigo\", sep = \"--\")\n\n[1] \"Hello--amigo\"\n\npaste0(\"Hello\", \"amigo\")\n\n[1] \"Helloamigo\"\n\ntolower(\"HAHAHAHAH\")\n\n[1] \"hahahahah\"\n\ntoupper(\"hueuehuehuheuhe\")\n\n[1] \"HUEUEHUEHUHEUHE\""
  },
  {
    "objectID": "funciones.html#operaciones-lógicas",
    "href": "funciones.html#operaciones-lógicas",
    "title": "Appendix C — Funciones en R",
    "section": "C.2 Operaciones Lógicas",
    "text": "C.2 Operaciones Lógicas\nEn R, los operadores lógicos se utilizan para realizar comparaciones lógicas entre valores o expresiones. Estos operadores devuelven valores booleanos (TRUE o FALSE) según se cumpla o no la condición.\nA continuación se presentan los operadores lógicos en R:\n\n\n\n\n \n  \n    Operador \n    Significado \n    Ejemplo \n  \n \n\n  \n    == \n    Igual a \n    2 == 2 (TRUE) \n  \n  \n    != \n    Diferente a \n    2 != 3 (TRUE) \n  \n  \n    > \n    Mayor que \n    3 > 2 (TRUE) \n  \n  \n    < \n    Menor que \n    2 < 3 (TRUE) \n  \n  \n    >= \n    Mayor o igual que \n    3 >= 2 (TRUE) \n  \n  \n    <= \n    Menor o igual que \n    2 <= 3 (TRUE) \n  \n  \n    & \n    Operador lógico AND \n    2 < 3 & 3 > 1 (TRUE) \n  \n  \n    | \n    Operador lógico OR \n    2 < 3 | 3 < 1 (TRUE) \n  \n  \n    ! \n    Operador lógico NOT \n    !(2 == 3) (TRUE) \n  \n\n\n\n\n\n\nC.2.1 Operador de igualdad: (==)\nEste operador se utiliza para comparar si dos valores son iguales. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na == b # FALSE\n\n[1] FALSE\n\n\n\n\nC.2.2 Operador de desigualdad: (!=)\nEste operador se utiliza para comparar si dos valores son diferentes. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na != b # TRUE\n\n[1] TRUE\n\n\n\n\nC.2.3 Operador de mayor que: (>)\nEste operador se utiliza para comparar si un valor es mayor que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\nb > a # TRUE\n\n[1] TRUE\n\n\n\n\nC.2.4 Operador de menor que: (<)\nEste operador se utiliza para comparar si un valor es menor que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na < b # TRUE\n\n[1] TRUE\n\n\n\n\nC.2.5 Operador de mayor o igual que: (>=)\nEste operador se utiliza para comparar si un valor es mayor o igual que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\nb >= a # TRUE\n\n[1] TRUE\n\n\n\n\nC.2.6 Operador de menor o igual que: (<=)\nEste operador se utiliza para comparar si un valor es menor o igual que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na <= b # TRUE\n\n[1] TRUE\n\n\n\n\nC.2.7 Operador lógico AND: (&)\nEste operador se utiliza para evaluar dos o más condiciones y retornar TRUE si todas se cumplen, de lo contrario retorna FALSE.\n\na <- 2\nb <- 3\nc <- 4\na < b & b < c # TRUE\n\n[1] TRUE\n\n\n\n\nC.2.8 Operador lógico OR: (|)\nEste operador se utiliza para evaluar dos o más condiciones y retornar TRUE si al menos una se cumple, de lo contrario retorna FALSE.\n\na <- 2\nb <- 3\nc <- 4\na > b | b < c # TRUE\n\n[1] TRUE\n\n\nOperador lógico NOT: (!) Este operador se utiliza para negar una condición. Si la condición es TRUE, retorna FALSE, y si la condición es FALSE, retorna TRUE.\n\na <- 2\nb <- 3\n!(a == b) # TRUE\n\n[1] TRUE\n\n\nEs importante tener en cuenta que los operadores lógicos se pueden utilizar en combinación para crear expresiones lógicas más complejas. Además, los operadores lógicos también se pueden utilizar en las estructuras de control condicionales, como if/else y switch, para tomar decisiones basadas en condiciones lógicas."
  },
  {
    "objectID": "funciones.html#crear-funciones-propias",
    "href": "funciones.html#crear-funciones-propias",
    "title": "Appendix C — Funciones en R",
    "section": "C.3 Crear Funciones Propias",
    "text": "C.3 Crear Funciones Propias\nEn R, es posible crear funciones propias para realizar tareas específicas y reutilizarlas en diferentes partes de un programa. Para crear una función en R, se utiliza la siguiente estructura:\n\nnombre_de_la_funcion <- function(argumentos) {\n  cuerpo_de_la_funcion\n}\n\nPor ejemplo, se puede crear una función que calcule la suma de dos números:\n\nsuma <- function(a, b) {\n  resultado <- a + b\n  return(resultado)\n}\n\nresultado_suma <- suma(2, 3)\nprint(resultado_suma) # 5\n\n[1] 5\n\n\nPor ejemplo, se puede crear una función que eleve al cuadrado:\n\ncuadrado <- function(x) { # x = parámetro\n    y = x ^ 2 # asiganción de variables solo dentro de la función\n    return(y) # especificar valor retornado (no necesario completamente)\n}\n\n\na <- 13\nb <- c(20,30,22,2,1)\ncuadrado(a)\n\n[1] 169\n\ncuadrado(b)\n\n[1] 400 900 484   4   1\n\n\nEs importante tener en cuenta que los nombres de las funciones en R deben cumplir las mismas reglas que los nombres de las variables. Además, es recomendable incluir comentarios explicativos dentro del cuerpo de la función para facilitar su comprensión y uso posterior.\nActividad:\nActividad: Crear una función que calcule la hipotenusa de un triángulo rectángulo (Teorema de Pitágoras):\n\n\n\nEstablece que el cuadrado de la longitud de la hipotenusa es igual a la suma de los cuadrados de las longitudes de los catetos.\nc^2 = {a^2}+{b^2}\nPor lo cual:\nc = \\sqrt{{a^2}+{b^2}}\n\n\n\n\n\n\nAyuda\n\n\n\n\nhipotenusa <- function(a, b){\n  #h <-     # En esta parte escribir la función\n  return(h)\n}\nr1 <-  hipotenusa(a = 5,  b = 5)\n\n\n\nEncontrar la Hipotenusa de:\nh=?, a = 10, b = 6\nh=?, a = 5, b = 4\nh=?, a = 3, b = 4"
  },
  {
    "objectID": "loops_R.html#estructuras-condicionales",
    "href": "loops_R.html#estructuras-condicionales",
    "title": "Appendix D — Estructura de Control en R",
    "section": "D.1 Estructuras condicionales",
    "text": "D.1 Estructuras condicionales\nLas estructuras condicionales son una de las tres estructuras de control principales en R. Estas estructuras permiten ejecutar un bloque de código solo si se cumple una condición determinada.\nLa estructura condicional más común en R es “if”. La sintaxis básica de la estructura “if” es la siguiente:\n\nif(Condición) {\n  operaciones_si_la_condición_es_TRUE\n}\n\nLa “condición” es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, el bloque de código dentro del “if” se ejecutará. Si la condición es falsa, el bloque de código dentro del “if” se ignorará.\nPor ejemplo, le pedimos a R que nos muestre el texto “Verdadero” si la condición se cumple.\n\n# Se cumple la condición y se muestra \"verdadero\"\nif(4 > 3) {\n  \"Verdadero\"\n}\n\n[1] \"Verdadero\"\n\n\n\n# No se cumple la condición y no pasa nada\nif(4 > 5) {\n  \"Verdadero\"\n}\n\nTambién se puede agregar un bloque de código opcional para el caso en que la condición sea falsa utilizando la estructura “else”. La sintaxis básica de la estructura “if” con “else” es la siguie\nSI esta condición es es cierta, ENTONCES haz estas operaciones, DE OTRO MODO haz estas otras operaciones.\n\nif(condición) {\n  operaciones_si_la_condición_es_TRUE\n} else {\n  operaciones_si_la_condición_es_FALSE\n}\n\nUsando los ejemplos anteriores, podemos mostrar “Falso” si no se cumple la condición, en lugar de que no ocurra nada\n\n# Se cumple la condición y se muestra \"Verdadero\"\nif(4 > 3) {\n  \"Verdadero\"\n} else {\n  \"Falso\"\n}\n\n[1] \"Verdadero\"\n\n\nLa estructura “ifelse” es otra forma de estructura condicional que permite ejecutar diferentes bloques de código en función de la condición. La sintaxis básica de la estructura “ifelse” es la siguiente:\n\nifelse(condición, expresión1, expresión2)\n\nSi la “condición” es verdadera, se ejecutará “expresión1”. Si la “condición” es falsa, se ejecutará “expresión2”.\nAdemás, se pueden anidar varias estructuras condicionales utilizando la sintaxis de “if” y “else”. Por ejemplo:\n\nif (condición1) {\n  # Código a ejecutar si la condición1 es verdadera\n} else if (condición2) {\n  # Código a ejecutar si la condición1 es falsa y la condición2 es verdadera\n} else {\n  # Código a ejecutar si todas las condiciones son falsas\n}\n\nEn resumen, las estructuras condicionales en R son herramientas muy útiles para controlar el flujo de ejecución de un programa en función de ciertas condiciones. Estas estructuras permiten crear soluciones más eficientes y complejas al permitir que los programas tomen decisiones y realicen acciones en función de las condiciones que se presenten."
  },
  {
    "objectID": "loops_R.html#estructuras-de-bucles",
    "href": "loops_R.html#estructuras-de-bucles",
    "title": "Appendix D — Estructura de Control en R",
    "section": "D.2 Estructuras de bucles",
    "text": "D.2 Estructuras de bucles\nLas estructuras de bucles son una de las tres estructuras de control principales en R. Estas estructuras permiten ejecutar un bloque de código repetidamente mientras se cumpla una condición determinada. En R, existen tres estructuras de bucles principales: “while”, “for” y “repeat”.\nBeneficios\n\nEs más fácil ver el objetivo de tu código; lo diferente llama más atención a la vista que aquello que permanece igual.\nEs más sencillo responder a cambios en los requerimientos. A medida que tus necesidades cambian, solo necesitarás realizar cambios en un lugar, en vez de recordar cambiar en cada lugar donde copiaste y pegaste el código.\nEs probable que tengas menos errores porque cada línea de código es utilizada en más lugares.\n\n\nD.2.1 Estructura de bucle “for”:\nLa estructura “for” permite repetir la ejecución de un bloque de código un número determinado de veces. La sintaxis básica de la estructura “for” es la siguiente:\n\nfor (variable in secuencia) {\n  # Código a ejecutar para cada elemento en la secuencia\n}\n\nLa “secuencia” es un objeto que contiene una serie de elementos. La “variable” toma el valor de cada elemento de la secuencia en cada iteración del bucle. En cada iteración, se ejecutará el bloque de código dentro del “for” para ese valor de la variable.\nEjemplo simple: print una secuencia\n\nfor (i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nEjemplo 2: Guardando los resultados en un vector\n\ndado <- 1:6\nmi_vector <- NULL\nfor(cara in dado) {\n  mi_vector[cara] <- cara ^ 2\n}\nmi_vector\n\n[1]  1  4  9 16 25 36\n\n\nEjemplo 3: Loops con vectores\n\nalumnos <- c(\"Carmen\", \"Adriana\", \"Marco\", \"Fabi\", \"Brenda\")\n\nfor(i in 1:length(alumnos)) {\n  print(paste(\"Hola,\", alumnos[i], sep = \" \"))\n}\n\n[1] \"Hola, Carmen\"\n[1] \"Hola, Adriana\"\n[1] \"Hola, Marco\"\n[1] \"Hola, Fabi\"\n[1] \"Hola, Brenda\"\n\n\nEjemplo 4: loops en Dataframes\n\ndf <- data.frame(a = rnorm(10), b = rnorm(10),\n                 c = rnorm(10), d = rnorm(10))\n\nfor(i in 1:ncol(df)){\n  promedio = mean(df[,i])\n  print(promedio)\n}\n\n[1] -0.385109\n[1] -0.3708451\n[1] -0.4826418\n[1] 0.1934167\n\n\n\n\nD.2.2 Estructura de bucle “while”:\nLa estructura “while” permite repetir la ejecución de un bloque de código mientras se cumpla una condición determinada. La sintaxis básica de la estructura “while” es la siguiente:\n\nwhile (condición) {\n  # Código a ejecutar mientras se cumpla la condición\n}\n\nLa “condición” es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, se ejecutará el bloque de código dentro del “while”. Este proceso se repetirá hasta que la condición sea falsa.\n\n\nD.2.3 Estructura de bucle “repeat”:\n\nrepeat {\n  # Código a ejecutar de manera indefinida\n  if (condición) {\n    break\n  }\n}\n\nEl bloque de código dentro del “repeat” se ejecutará de manera indefinida hasta que se encuentre la sentencia “break”, que permite salir del bucle. La “condición” es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, se ejecutará la sentencia “break” y se saldrá del bucle."
  },
  {
    "objectID": "loops_R.html#estructuras-de-control-de-flujo",
    "href": "loops_R.html#estructuras-de-control-de-flujo",
    "title": "Appendix D — Estructura de Control en R",
    "section": "D.3 Estructuras de control de flujo",
    "text": "D.3 Estructuras de control de flujo\n“next” y “break” son palabras clave importantes en R que se utilizan en las estructuras de control de flujo, específicamente en las estructuras de bucle. “next” se utiliza para saltar a la siguiente iteración del bucle sin ejecutar el resto del código dentro del bucle, mientras que “break” se utiliza para detener el bucle de forma abrupta, incluso si la condición del bucle todavía se cumple.\n\nD.3.1 Estructuras de control “next”:\n“next” se utiliza en una estructura de bucle para saltar a la siguiente iteración del bucle sin ejecutar el resto del código dentro del bucle. Es decir, si se encuentra la palabra clave “next” dentro de un bucle, se omitirá el código que viene después y el bucle pasará inmediatamente a la siguiente iteración. La palabra clave “next” es útil cuando se desea saltar una iteración específica del bucle, sin afectar el resto del código.\nPor ejemplo, en el siguiente código se utiliza la palabra clave “next” para omitir la impresión del número 3 dentro del bucle “for”:\n\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n\n\n\n\nD.3.2 Estructuras de control “break”:\n“break”, por otro lado, se utiliza en una estructura de bucle para detener el bucle de forma abrupta, incluso si la condición del bucle todavía se cumple. Es decir, si se encuentra la palabra clave “break” dentro de un bucle, se detendrá el bucle de inmediato y se continuará con la ejecución del código que viene después del bucle. La palabra clave “break” es útil cuando se desea detener el bucle en un punto específico sin tener que esperar a que la condición del bucle se deje de cumplir.\nPor ejemplo, en el siguiente código se utiliza la palabra clave “break” para detener el bucle “while” cuando el valor de “i” es mayor que 5:\n\ni <- 1\nwhile (i < 10) {\n  if (i > 5) {\n    break\n  }\n  print(i)\n  i <- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "loops_R.html#referencias",
    "href": "loops_R.html#referencias",
    "title": "Appendix D — Estructura de Control en R",
    "section": "D.4 Referencias",
    "text": "D.4 Referencias\n\nhttps://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html\nhttps://es.r4ds.hadley.nz/iteración.html\nhttps://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html"
  },
  {
    "objectID": "tidyverse_R.html#introducción-a-tidyverse",
    "href": "tidyverse_R.html#introducción-a-tidyverse",
    "title": "Appendix E — Tidyverse en R",
    "section": "E.1 Introducción a Tidyverse",
    "text": "E.1 Introducción a Tidyverse\nTidyverse es una colección de paquetes diseñados para Ciencia de Datos.\n\n\n\n\n\n\n# instalación\ninstall.packages(\"tidyverse\")\n\nTodos los paquetes comparten una filosofía de diseño, una gramática y estructuras de datos.\nEsta filosofía promueve\n\nEn Pipes, navegarás dentro del pipe, %>%, para anidar instrucciones\nSi bien copiar-y-pegar (copy-and-paste) es una herramienta poderosa, deberías evitar utilizarla más de dos veces. Repetir el código es peligroso porque puede llevar a errores e inconsistencias.\nA medida que comiences a escribir funciones más potentes, necesitarás una base sólida acerca de las estructuras de datos.\nLas funciones nos permiten evitar la repetición de código; sin embargo, muchas veces necesitas repertir las mismas acciones con diferentes inputs. Puedes hacer esto con herramientas de iteración."
  },
  {
    "objectID": "tidyverse_R.html#estructura-de-un-dataframe",
    "href": "tidyverse_R.html#estructura-de-un-dataframe",
    "title": "Appendix E — Tidyverse en R",
    "section": "E.2 Estructura de un dataframe",
    "text": "E.2 Estructura de un dataframe\n\n\n\nLectura de Base de SII\n\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(sf))\ntbl_sii  <- readRDS(\"data/rds/mz_constru_SII.rds\") %>% \n  st_drop_geometry() # descartar geometrias solo usar la tabla de datos\n\nhead(tbl_sii)\n\n# A tibble: 6 × 10\n  n_com   manzana   reg cod_com num_manz oficinas comercio vivienda total   AREA\n  <chr>   <chr>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <dbl>  <dbl>\n1 IQUIQUE 1201-0      1    1201        0        0        0        0     0   585.\n2 IQUIQUE 1201-0      1    1201        0        0        0        0     0 17291.\n3 ALTO H… 1211-0      1    1211        0        0        0        0     0  1859.\n4 ALTO H… 1211-0      1    1211        0        0        0        0     0   442.\n5 ALTO H… 1211-0      1    1211        0        0        0        0     0   205.\n6 ALTO H… 1211-0      1    1211        0        0        0        0     0  1200."
  },
  {
    "objectID": "tidyverse_R.html#funciones-básicas-dplyr",
    "href": "tidyverse_R.html#funciones-básicas-dplyr",
    "title": "Appendix E — Tidyverse en R",
    "section": "E.3 Funciones básicas dplyr",
    "text": "E.3 Funciones básicas dplyr\n\n\n\n\nE.3.1 Select\nselect Seleccionar variables relevantes\n\n# seleccionar nomnres de columnas que deseo conservar\ntbl_sii %>%\n  select(n_com, oficinas, comercio, vivienda)\n\n# A tibble: 210,662 × 4\n   n_com         oficinas comercio vivienda\n   <chr>            <dbl>    <dbl>    <dbl>\n 1 IQUIQUE              0        0        0\n 2 IQUIQUE              0        0        0\n 3 ALTO HOSPICIO        0        0        0\n 4 ALTO HOSPICIO        0        0        0\n 5 ALTO HOSPICIO        0        0        0\n 6 ALTO HOSPICIO        0        0        0\n 7 ALTO HOSPICIO        0        0        0\n 8 ALTO HOSPICIO        0        0        0\n 9 ALTO HOSPICIO        0        0        0\n10 ALTO HOSPICIO        0        0        0\n# ℹ 210,652 more rows\n\n# seleccionar nomnres de columnas que deseo eliminar anteponiendo un \"-\"\ntbl_sii %>%\n  select(-cod_com)\n\n# A tibble: 210,662 × 9\n   n_com         manzana   reg num_manz oficinas comercio vivienda total   AREA\n   <chr>         <chr>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <dbl>  <dbl>\n 1 IQUIQUE       1201-0      1        0        0        0        0     0   585.\n 2 IQUIQUE       1201-0      1        0        0        0        0     0 17291.\n 3 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  1859.\n 4 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   442.\n 5 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   205.\n 6 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  1200.\n 7 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  4548.\n 8 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   130.\n 9 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   300.\n10 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  6488.\n# ℹ 210,652 more rows\n\n\n\n\nE.3.2 Filter\n\nmi_comuna <- \"LAS CONDES\" \n\nsii_com <- tbl_sii %>%\n  filter(n_com == mi_comuna) \n \nhead(sii_com, 5)\n\n# A tibble: 5 × 10\n  n_com    manzana   reg cod_com num_manz oficinas comercio vivienda total  AREA\n  <chr>    <chr>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <dbl> <dbl>\n1 LAS CON… 15108-…    13   15108     2358        0        0     1316  1390 2358.\n2 LAS CON… 15108-…    13   15108     2360        0        0     1590  1622 2280.\n3 LAS CON… 15108-…    13   15108     2362        0        0     1436  1502 2659.\n4 LAS CON… 15108-…    13   15108     2364        0        0     1926  1926 3348.\n5 LAS CON… 15108-…    13   15108     2366        0        0     2584  2656 4390.\n\n\nfilter: Operadores Lógicos\n\n\n\n\n\n\n\n\n\n\n\nOperador\nComparación\nEjemplo\nResultado\n\n\n\n\nx | y\nx Ó y es verdadero\nTRUE | FALSE\nTRUE\n\n\nx & y\nx Y y son verdaderos\nTRUE & FALSE\nFALSE\n\n\n!x\nx no es verdadero (negación)\n!TRUE\nFALSE\n\n\nisTRUE(x)\nx es verdadero (afirmación)\nisTRUE(TRUE)\nTRUE\n\n\n\n\n\nFiltrar las manzanas que tengan valores de oficina y comercio mayores a 0\n\nsii_com %>%\n  filter(oficinas > 0 & comercio > 0) \n\n# A tibble: 493 × 10\n   n_com manzana   reg cod_com num_manz oficinas comercio vivienda  total   AREA\n   <chr> <chr>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl>  <dbl>  <dbl>\n 1 LAS … 15108-…    13   15108     2400     322     3388    65422  1.22e5 1.06e5\n 2 LAS … 15108-…    13   15108     2407   30864     2518        0  7.50e4 4.04e3\n 3 LAS … 15108-…    13   15108     1392     424     9902        0  1.58e4 1.27e4\n 4 LAS … 15108-…    13   15108      336   45190     1432        0  8.28e4 3.24e3\n 5 LAS … 15108-…    13   15108      338     424.     244.    9993. 1.17e4 1.11e4\n 6 LAS … 15108-…    13   15108      338     414.     238.    9765. 1.14e4 1.06e4\n 7 LAS … 15108-…    13   15108      339    1120     5274     7748  1.49e4 9.38e3\n 8 LAS … 15108-…    13   15108      340     250       72    55206  7.23e4 1.22e4\n 9 LAS … 15108-…    13   15108      342     494     1914    47690  6.97e4 1.62e4\n10 LAS … 15108-…    13   15108      349   17826     1568        0  3.38e4 1.84e3\n# ℹ 483 more rows"
  },
  {
    "objectID": "tidyverse_R.html#resúmenes-estadísticos-con-dplyr",
    "href": "tidyverse_R.html#resúmenes-estadísticos-con-dplyr",
    "title": "Appendix E — Tidyverse en R",
    "section": "E.4 Resúmenes Estadísticos con dplyr",
    "text": "E.4 Resúmenes Estadísticos con dplyr\n\n\n\nContabilizar cuantos metros cuadrados de oficina por cada comuna.\n\ntbl_resumen <-  tbl_sii %>%\n  group_by(n_com) %>%\n  summarise(Cantidad_mz = n(),\n            Total_of = sum(oficinas)) %>%\n  arrange(desc(Total_of)) # Ordenar\n\ntbl_resumen\n\n# A tibble: 170 × 3\n   n_com           Cantidad_mz Total_of\n   <chr>                 <int>    <dbl>\n 1 SANTIAGO CENTRO         686  6105996\n 2 LAS CONDES             2310  4248336\n 3 PROVIDENCIA             885  3495426\n 4 HUECHURABA             1160  1006138\n 5 QUILICURA              2592   751874\n 6 VITACURA                950   743734\n 7 SANTIAGO SUR            623   669270\n 8 Ã‘UÃ‘OA                1337   637982\n 9 SANTIAGO OESTE          586   586724\n10 PUDAHUEL               2775   561868\n# ℹ 160 more rows\n\n\nActividad\n\nContabilizar cuantos metros cuadrados de Comercio hay por cada comuna rdenar de mayor a menor.\nCrear tabla con las 10 comunas que tienen mayor densisdad de Comercio\n\n\n\n\n\n\n\nDensidad de comercio\n\n\n\nSe puede entender como la división de la cantidad de metros cuadrados de comercio dividio por el total de metros cuadrados."
  },
  {
    "objectID": "tidyverse_R.html#visualización-de-variables",
    "href": "tidyverse_R.html#visualización-de-variables",
    "title": "Appendix E — Tidyverse en R",
    "section": "E.5 Visualización de Variables",
    "text": "E.5 Visualización de Variables\n\nE.5.1 Función Plot\n\noptions(scipen = 999) # evitas notación cientiífica\nhist(sii_com$vivienda, breaks = 50,\n     main = \"Histograma mt2 de Viviendas\", col = \"#225ea8\")\n\n\n\n# colores:https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\n\n\n\nE.5.2 Package ggplot2\n\nlibrary(ggplot2)\nggplot(sii_com, aes(x = vivienda)) + \n  geom_histogram(bins = 50, fill = \"#225ea8\", color =\"black\")\n\n\n\n\n\n\n\n\nggplot2 con estilos y características\n\nggplot(sii_com, aes(x = vivienda)) +\n  geom_histogram(bins = 50, color = \"#c7e9b4\", fill = \"#1d91c0\")+\n  theme_bw()+\n  labs(title=\"Histograma mt2 de Viviendas\", x =\"Mt2. Viviendas\", y = \"Frecuencias\")+\n  theme(plot.title = element_text(face = \"bold\",colour= \"gray60\", size=10))"
  },
  {
    "objectID": "tidyverse_R.html#referencias",
    "href": "tidyverse_R.html#referencias",
    "title": "Appendix E — Tidyverse en R",
    "section": "E.6 Referencias:",
    "text": "E.6 Referencias:\n\nR para Ciencia de Datos\nRStudio para Estadística Descriptiva en Ciencias Sociales\nhttps://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html\nhttps://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html\nPaletas de colores"
  },
  {
    "objectID": "espacial_R.html#introducción",
    "href": "espacial_R.html#introducción",
    "title": "Appendix F — Objetos Espaciales en R",
    "section": "F.1 Introducción",
    "text": "F.1 Introducción\nUn rasgo es una cosa, un objeto del mundo real, como un edificio o un árbol. Al igual que los objetos, suelen estar formados por otros objetos. Lo mismo ocurre con los rasgos: un conjunto de rasgos puede formar un único rasgo. Una masa forestal puede ser un rasgo, un bosque puede ser un rasgo, una ciudad puede ser un rasgo. Un píxel de una imagen de satélite puede ser un rasgo, una imagen completa también puede ser un rasgo.\nLos elementos tienen una geometría que describe su ubicación en la Tierra y atributos que describen otras propiedades. La geometría de un árbol puede ser la delineación de su copa, de su tallo o el punto que indica su centro. Otras propiedades pueden ser su altura, color, diámetro a la altura del pecho en una fecha determinada, etc."
  },
  {
    "objectID": "espacial_R.html#lectura-de-insumos-espaciales",
    "href": "espacial_R.html#lectura-de-insumos-espaciales",
    "title": "Appendix F — Objetos Espaciales en R",
    "section": "F.2 Lectura de Insumos Espaciales",
    "text": "F.2 Lectura de Insumos Espaciales\n\n# install.packages(\"sf\")\nlibrary(sf)\ncrs_ll <- \"+proj=longlat +datum=WGS84 +no_defs\"\ncrs_utm <- \"+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\"\ncenso <-  readRDS(\"data/rds/Zonas_Censales_2017_Nacional.rds\")"
  },
  {
    "objectID": "espacial_R.html#transformar-a-objeto-sf-simple-features",
    "href": "espacial_R.html#transformar-a-objeto-sf-simple-features",
    "title": "Appendix F — Objetos Espaciales en R",
    "section": "F.3 Transformar a objeto sf (simple features)",
    "text": "F.3 Transformar a objeto sf (simple features)\n\n# transformar a objeto sf (simple features)\ncenso_sf <- st_as_sf(censo)\n# head(censo_sf)\nnames(censo_sf)\n\n [1] \"REGION\"     \"NOM_REGION\" \"PROVINCIA\"  \"NOM_PROVIN\" \"COMUNA\"    \n [6] \"NOM_COMUNA\" \"URBANO\"     \"DISTRITO\"   \"LOC_ZON\"    \"GEOCODIGO\" \n[11] \"SHAPE_Leng\" \"SHAPE_Area\" \"geometry\""
  },
  {
    "objectID": "espacial_R.html#filtros-espaciales-por-data",
    "href": "espacial_R.html#filtros-espaciales-por-data",
    "title": "Appendix F — Objetos Espaciales en R",
    "section": "F.4 Filtros espaciales por data",
    "text": "F.4 Filtros espaciales por data\n\nlibrary(dplyr)\nmi_communa <-  \"LAS CONDES\"\n\nzonas_com <-  censo_sf %>% \n  filter(NOM_COMUNA == mi_communa)\n\nzonas_com %>% head()\n\nSimple feature collection with 6 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -70.56629 ymin: -33.41713 xmax: -70.47884 ymax: -33.36421\nGeodetic CRS:  +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0\n            REGION                       NOM_REGION PROVINCIA NOM_PROVIN COMUNA\n13114051001     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114041001     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114041003     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114161002     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114151003     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114021002     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n            NOM_COMUNA     URBANO DISTRITO LOC_ZON   GEOCODIGO SHAPE_Leng\n13114051001 LAS CONDES LAS CONDES        5       1 13114051001 0.02302722\n13114041001 LAS CONDES LAS CONDES        4       1 13114041001 0.09575698\n13114041003 LAS CONDES LAS CONDES        4       3 13114041003 0.06782420\n13114161002 LAS CONDES LAS CONDES       16       2 13114161002 0.06482893\n13114151003 LAS CONDES LAS CONDES       15       3 13114151003 0.04135677\n13114021002 LAS CONDES LAS CONDES        2       2 13114021002 0.04687558\n              SHAPE_Area                       geometry\n13114051001 3.357387e-05 MULTIPOLYGON (((-70.56008 -...\n13114041001 2.708800e-04 MULTIPOLYGON (((-70.47951 -...\n13114041003 2.451087e-04 MULTIPOLYGON (((-70.5267 -3...\n13114161002 1.450608e-04 MULTIPOLYGON (((-70.50789 -...\n13114151003 8.288767e-05 MULTIPOLYGON (((-70.51477 -...\n13114021002 5.754391e-05 MULTIPOLYGON (((-70.53606 -..."
  },
  {
    "objectID": "espacial_R.html#visualización-cartográficas",
    "href": "espacial_R.html#visualización-cartográficas",
    "title": "Appendix F — Objetos Espaciales en R",
    "section": "F.5 Visualización Cartográficas",
    "text": "F.5 Visualización Cartográficas\n\nF.5.1 Visualización estática Simple\n\n## Visualizar\n# Consideración el plot se realiza sobre la columna geometry\n\nnombre_plot <-  paste0(\"COMUNA DE \", mi_communa)\nplot(zonas_com$geometry, main = nombre_plot,col =\"orange\")\n\n\n\n\n\n\n\n\n\n\nF.5.2 Visualización estática con ggplot2\n\nlibrary(ggplot2)\n\n# Visualización ggplot y sf\nggplot() +\n  geom_sf(data = zonas_com, fill = \"orange\", alpha=0.5)+\n  ggtitle(nombre_plot) +\n  theme_bw() +\n  theme(legend.position=\"none\")+\n  theme(panel.grid.major = element_line(colour = \"gray80\"),\n        panel.grid.minor = element_line(colour = \"gray80\"))\n\n\n\n\n\n\n\n\n\n\nF.5.3 Visualización Dinámica con mapview\n\n# install.packages(\"mapview\")\nlibrary(mapview)\nm <- mapview(zonas_com, alpha = 0.5,\n        col.regions = \"orange\", color=\"gray80\",\n        legend =FALSE, cex = 3)\nm"
  },
  {
    "objectID": "espacial_R.html#referencias",
    "href": "espacial_R.html#referencias",
    "title": "Appendix F — Objetos Espaciales en R",
    "section": "F.6 Referencias",
    "text": "F.6 Referencias\nSimple Features for R"
  },
  {
    "objectID": "install_rgee.html#registrarse-en-gee",
    "href": "install_rgee.html#registrarse-en-gee",
    "title": "Appendix G — Instalación de Rgee",
    "section": "G.1 Registrarse en GEE",
    "text": "G.1 Registrarse en GEE\nPara acceder de los recursos de la plataforma de Google Earth Engine desde R de acuerdo al programa del curso, correspondiendo a los siguientes pasos:\n\n\nTener cuenta en google (gmail)\n\n\nDirigirse a la siguiente página web https://earthengine.google.com\n\n\n\n\n\n\n\nRegistrarse con la cuenta google, presionando botón “sing up” esquina superior derecha.\n\n\nRecibir un correo de confirmación en el gmail."
  },
  {
    "objectID": "install_rgee.html#instalación-de-librería-rgee-en-r",
    "href": "install_rgee.html#instalación-de-librería-rgee-en-r",
    "title": "Appendix G — Instalación de Rgee",
    "section": "G.2 Instalación de librería Rgee en R",
    "text": "G.2 Instalación de librería Rgee en R\nEl package rgee es una “librería cliente” de Earth Engine para R, que permite a los usuarios aprovechar las ventajas que presenta el ecosistema espacial de R dentro de Google Earth Engine y viceversa.\nTodas las clases, módulos y funciones de la API de Python de Earth Engine están disponibles en R gracias a la librería reticulate; finalmente rgee adiciona nuevos features como el diseño del imput y output de datos, la visualización en mapas interactivos, la facil extracción de series de tiempo, el manejo y la visualización de metadato\n\n\n\nOpción 1: Diretamente desde CRAN\n\ninstall.packages(\"rgee\")\n\n\nOpción de Desarrollo: Desde la Versión de Desarrollo alojada en Github\n\n# install.packages(\"remotes\")\nremotes::install_github(\"r-spatial/rgee\", force = TRUE)\n\nInstalar Dependencias\n\nlibrary(rgee)\nee_install() # Consulta sobre crear ambiente virtual python \"Yes\"\n# Ahora de debe reiniciar Rstudio\n\nRevisión de Instalación correcta\n\n# Iniciar Servicio\nlibrary(rgee)\nee_Initialize()\n\n# Selección de producto satelital (Modelo Digital de Elevación)\nsrtm <- ee$Image(\"USGS/SRTMGL1_003\")\n\n# parámetros de visualización\nviz <- list(\n  max = 4000,\n  min = 0,\n  palette = c(\"#000000\",\"#5AAD5A\",\"#A9AD84\",\"#FFFFFF\")\n)\n\n# Visualización map dinámico\nm <- Map$addLayer(\n  eeObject = srtm,\n  visParams =  viz,\n  name = 'SRTM'\n)\nm"
  },
  {
    "objectID": "install_rgee.html#usuarios-con-experiencie-en-enviroments-virtuales",
    "href": "install_rgee.html#usuarios-con-experiencie-en-enviroments-virtuales",
    "title": "Appendix G — Instalación de Rgee",
    "section": "G.3 Usuarios con experiencie en enviroments virtuales",
    "text": "G.3 Usuarios con experiencie en enviroments virtuales\n\n#Use ee_install_set_pyenv (Recommended for users with experience with Python environments)\n\nrgee::ee_install_set_pyenv(\n  py_path = \"/home/csaybar/.virtualenvs/rgee/bin/python\", # Change it for your own Python PATH\n  py_env = \"rgee\" # Change it for your own Python ENV\n)"
  },
  {
    "objectID": "install_rgee.html#otras-librerías-que-se-deben-instalar",
    "href": "install_rgee.html#otras-librerías-que-se-deben-instalar",
    "title": "Appendix G — Instalación de Rgee",
    "section": "G.4 Otras Librerías que se deben instalar",
    "text": "G.4 Otras Librerías que se deben instalar\n\ninstall.packages(\"sf\") # Mapas dinámicos\ninstall.packages(\"mapview\") # Mapas dinámicos\ninstall.packages(\"reticulate\") # interface python\ninstall.packages(\"jsonlite\") #manipulación de datos tipo Json\ninstall.packages('tidyverse') # Para ciencia de datos\ninstall.packages('cptcity') #Para manejar paletas decolores\ninstall.packages('viridis') #Para manejar paletas decolores\ninstall.packages('ggmap') # Para manejar tipos de basemap\ninstall.packages('plot3D') #plot objetos 3d"
  },
  {
    "objectID": "install_rgee.html#referencias",
    "href": "install_rgee.html#referencias",
    "title": "Appendix G — Instalación de Rgee",
    "section": "G.5 Referencias",
    "text": "G.5 Referencias\nGoogle Earth Engine for R https://github.com/r-spatial/rgee\nEjemplos https://csaybar.github.io/rgee-examples/\nManual en Español https://barja8.github.io/Handbook_rgee/pdf/vol01.pdf\nIntroduction to rgee https://cran.r-project.org/web/packages/rgee/vignettes/rgee01.html"
  },
  {
    "objectID": "install_rgee.html#contactos",
    "href": "install_rgee.html#contactos",
    "title": "Appendix G — Instalación de Rgee",
    "section": "G.6 Contactos",
    "text": "G.6 Contactos\nDenis Berroeta G.\nInvestigador, Centro Inteligencia Territorial, Design Lab UAI\ndenis.berroeta@uai.cl\nAv. Presidente Errázuriz 3485, Las Condes\n**Felipe Matas*\nAnalista, Centro Inteligencia Territorial, Design Lab UAI\nfelipe.matas@edu.uai.cl\nAv. Presidente Errázuriz 3485, Las Condes"
  }
]